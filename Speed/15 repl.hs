(2,2),10003),((2,3),10011),((2,4),10006),((2,5),10001),((2,6),10005),((2,7),10002),((2,8),10009),((2,9),10001),((3,0),10003),((3,1),10001),((3,2),10006),((3,3),10006),((3,4),10005),((3,5),10009),((3,6),10013),((3,7),10006),((3,8),10003),((3,9),10001),((4,0),10009),((4,1),10003),((4,2),10005),((4,3),10011),((4,4),10004),((4,5),10001),((4,6),10009),((4,7),10004),((4,8),10001),((4,9),10009),((5,0),10005),((5,1),10007),((5,2),10001),((5,3),10003),((5,4),10001),((5,5),10002),((5,6),10001),((5,7),10002),((5,8),10003),((5,9),10006),((6,0),10001),((6,1),10003),((6,2),10001),((6,3),10001),((6,4),10007),((6,5),10008),((6,6),10002),((6,7),10001),((6,8),10008),((6,9),10007),((7,0),10007),((7,1),10008),((7,2),10003),((7,3),10005),((7,4),10001),((7,5),10001),((7,6),10004),((7,7),10006),((7,8),10006),((7,9),10008),((8,0),10005),((8,1),10008),((8,2),10003),((8,3),10006),((8,4),10001),((8,5),10003),((8,6),10002),((8,7),10004),((8,8),10002),((8,9),10008),((9,0),10003),((9,1),10003),((9,2),10009),((9,3),10009),((9,4),10001),((9,5),10007),((9,6),10001),((9,7),10009),((9,8),10001),((9,9),10001)]
Prelude Data.Array Data.List Data.Function Data.Ix> step ar st = array (bounds ar) . pickbest . concatMap (\(p, s) -> ((p,s):) . map (\p' -> (p', s + (ar ! p'))) $ adj ar p) $ assocs st
Prelude Data.Array Data.List Data.Function Data.Ix> step a . step a $ start a
array ((0,0),(9,9)) [((0,0),0),((0,1),1),((0,2),3),((0,3),9999),((0,4),9999),((0,5),9999),((0,6),9999),((0,7),9999),((0,8),9999),((0,9),9999),((1,0),1),((1,1),4),((1,2),9999),((1,3),9999),((1,4),9999),((1,5),9999),((1,6),9999),((1,7),9999),((1,8),9999),((1,9),9999),((2,0),7),((2,1),9999),((2,2),9999),((2,3),9999),((2,4),9999),((2,5),9999),((2,6),9999),((2,7),9999),((2,8),9999),((2,9),9999),((3,0),9999),((3,1),9999),((3,2),9999),((3,3),9999),((3,4),9999),((3,5),9999),((3,6),9999),((3,7),9999),((3,8),9999),((3,9),9999),((4,0),9999),((4,1),9999),((4,2),9999),((4,3),9999),((4,4),9999),((4,5),9999),((4,6),9999),((4,7),9999),((4,8),9999),((4,9),9999),((5,0),9999),((5,1),9999),((5,2),9999),((5,3),9999),((5,4),9999),((5,5),9999),((5,6),9999),((5,7),9999),((5,8),9999),((5,9),9999),((6,0),9999),((6,1),9999),((6,2),9999),((6,3),9999),((6,4),9999),((6,5),9999),((6,6),9999),((6,7),9999),((6,8),9999),((6,9),9999),((7,0),9999),((7,1),9999),((7,2),9999),((7,3),9999),((7,4),9999),((7,5),9999),((7,6),9999),((7,7),9999),((7,8),9999),((7,9),9999),((8,0),9999),((8,1),9999),((8,2),9999),((8,3),9999),((8,4),9999),((8,5),9999),((8,6),9999),((8,7),9999),((8,8),9999),((8,9),9999),((9,0),9999),((9,1),9999),((9,2),9999),((9,3),9999),((9,4),9999),((9,5),9999),((9,6),9999),((9,7),9999),((9,8),9999),((9,9),9999)]
Prelude Data.Array Data.List Data.Function Data.Ix> solve ar = let bs = snd $ bounds ar in map (! bs) . iterate (step ar) $ start ar                     
Prelude Data.Array Data.List Data.Function Data.Ix> solve a
[9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> solve ar
nterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), ())      

<interactive>:105:61: error:
    * Couldn't match expected type `(a1, b1)' with actual type `()'
    * In the expression: ()
      In the first argument of `array', namely `((0, 0), ())'
      In the expression: array ((0, 0), ())
    * Relevant bindings include
        enlargen :: Array (a, b) e -> [((a1, b1), e1)] -> Array (a1, b1) e1
          (bound at <interactive>:105:1)
Prelude Data.Array Data.List Data.Function Data.Ix> scalen n = (n + 1) * 5 - 1
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalenh)) . 

<interactive>:107:84: error:
    parse error (possibly incorrect indentation or mismatched brackets)
Prelude Data.Array Data.List Data.Function Data.Ix> both f (a,b) = (f a,f b)
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) . [ | x <- [0..sw]]
<interactive>:109:87: error: parse error on input `|'
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [(both (`mod` w + 1) (x,y) ! ar) + (max x y `div` (w + 1) | x <- [0..scalen w], y <- [0..scalen h]] 

<interactive>:110:145: error: parse error on input `x'
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [(both (`mod` w + 1) (x,y) ! ar) + (max x y `div` w + 1) | x <- [0..scalen w], y <- [0..scalen h]] 

<interactive>:111:92: error:
    The operator `mod' [infixl 7] of a section
        must have lower precedence than that of the operand,
          namely `+' [infixl 6]
        in the section: ``mod` w + 1'
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [(both (`mod` (w 
+ 1)) (x,y) ! ar) + (max x y `div` w + 1) | x <- [0..scalen w], y <- [0..scalen h]]

<interactive>:112:87: error:
    * Couldn't match expected type `Array (Array (a, a) e) a'
                  with actual type `(a, a)'
    * In the first argument of `(!)', namely
        `both (`mod` (w + 1)) (x, y)'
      In the first argument of `(+)', namely
        `(both (`mod` (w + 1)) (x, y) ! ar)'
      In the expression:
        (both (`mod` (w + 1)) (x, y) ! ar) + (max x y `div` w + 1)
    * Relevant bindings include
        y :: a (bound at <interactive>:112:166)
        x :: a (bound at <interactive>:112:146)
        bs :: ((a, a), (a, a)) (bound at <interactive>:112:19)
        w :: a (bound at <interactive>:112:26)
        h :: a (bound at <interactive>:112:28)
        ar :: Array (a, a) e (bound at <interactive>:112:10)
        enlargen :: Array (a, a) e -> Array (a, a) e1
          (bound at <interactive>:112:1)
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), ((both (`mod` (w + 1)) (x,y) ! ar) + (max x y `div` w + 1)) `mod` 10) | x <- [0..scalen w], y <- [0..scalen h]]

<interactive>:113:96: error:
    * Couldn't match expected type `Array (Array (e, e) e1) e'
                  with actual type `(e, e)'
    * In the first argument of `(!)', namely
        `both (`mod` (w + 1)) (x, y)'
      In the first argument of `(+)', namely
        `(both (`mod` (w + 1)) (x, y) ! ar)'
      In the first argument of `mod', namely
        `((both (`mod` (w + 1)) (x, y) ! ar) + (max x y `div` w + 1))'
    * Relevant bindings include
        y :: e (bound at <interactive>:113:186)
        x :: e (bound at <interactive>:113:166)
        bs :: ((e, e), (e, e)) (bound at <interactive>:113:19)
        w :: e (bound at <interactive>:113:26)
        h :: e (bound at <interactive>:113:28)
        ar :: Array (e, e) e1 (bound at <interactive>:113:10)
        (Some bindings suppressed; use -fmax-relevant-binds=N or -fno-max-relevant-binds)
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), ((ar ! both (`mod` (w + 1)) (x,y)) + (max x y `div` w + 1)) `mod` 10) | x <- [0..scalen w], y <- [0..scalen h]]
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen a
array ((0,0),(49,49)) [((0,0),2),((0,1),2),((0,2),3),((0,3),4),((0,4),8),((0,5),2),((0,6),2),((0,7),4),((0,8),2),((0,9),4),((0,10),3),((0,11),3),((0,12),4),((0,13),5),((0,14),9),((0,15),3),((0,16),3),((0,17),5),((0,18),4),((0,19),5),((0,20),4),((0,21),4),((0,22),5),((0,23),6),((0,24),0),((0,25),4),((0,26),4),((0,27),7),((0,28),5),((0,29),6),((0,30),5),((0,31),5),((0,32),6),((0,33),7),((0,34),1),((0,35),5),((0,36),6),((0,37),8),((0,38),6),((0,39),7),((0,40),6),((0,41),6),((0,42),7),((0,43),8),((0,44),2),((0,45),7),((0,46),7),((0,47),9),((0,48),7),((0,49),8),((1,0),2),((1,1),4),((1,2),2),((1,3),7),((1,4),5),((1,5),4),((1,6),4),((1,7),2),((1,8),3),((1,9),5),((1,10),3),((1,11),5),((1,12),3),((1,13),8),((1,14),6),((1,15),5),((1,16),5),((1,17),3),((1,18),5),((1,19),6),((1,20),4),((1,21),6),((1,22),4),((1,23),9),((1,24),7),((1,25),6),((1,26),6),((1,27),5),((1,28),6),((1,29),7),((1,30),5),((1,31),7),((1,32),5),((1,33),0),((1,34),8),((1,35),7),((1,36),8),((1,37),6),((1,38),7),((1,39),8),((1,40),6),((1,41),8),((1,42),6),((1,43),1),((1,44),9),((1,45),9),((1,46),9),((1,47),7),((1,48),8),((1,49),9),((2,0),7),((2,1),9),((2,2),4),((2,3),0),((2,4),7),((2,5),2),((2,6),6),((2,7),3),((2,8),0),((2,9),3),((2,10),8),((2,11),0),((2,12),5),((2,13),1),((2,14),8),((2,15),3),((2,16),7),((2,17),4),((2,18),2),((2,19),4),((2,20),9),((2,21),1),((2,22),6),((2,23),2),((2,24),9),((2,25),4),((2,26),8),((2,27),6),((2,28),3),((2,29),5),((2,30),0),((2,31),2),((2,32),7),((2,33),3),((2,34),0),((2,35),5),((2,36),0),((2,37),7),((2,38),4),((2,39),6),((2,40),1),((2,41),3),((2,42),8),((2,43),4),((2,44),1),((2,45),7),((2,46),1),((2,47),8),((2,48),5),((2,49),7),((3,0),4),((3,1),2),((3,2),7),((3,3),5),((3,4),4),((3,5),0),((3,6),0),((3,7),6),((3,8),4),((3,9),3),((3,10),5),((3,11),3),((3,12),8),((3,13),6),((3,14),5),((3,15),1),((3,16),1),((3,17),7),((3,18),6),((3,19),4),((3,20),6),((3,21),4),((3,22),9),((3,23),7),((3,24),6),((3,25),2),((3,26),2),((3,27),9),((3,28),7),((3,29),5),((3,30),7),((3,31),5),((3,32),0),((3,33),8),((3,34),7),((3,35),3),((3,36),4),((3,37),0),((3,38),8),((3,39),6),((3,40),8),((3,41),6),((3,42),1),((3,43),9),((3,44),8),((3,45),5),((3,46),5),((3,47),1),((3,48),9),((3,49),7),((4,0),8),((4,1),4),((4,2),6),((4,3),0),((4,4),5),((4,5),2),((4,6),0),((4,7),5),((4,8),2),((4,9),1),((4,10),9),((4,11),5),((4,12),7),((4,13),1),((4,14),6),((4,15),3),((4,16),1),((4,17),6),((4,18),4),((4,19),2),((4,20),0),((4,21),6),((4,22),8),((4,23),2),((4,24),7),((4,25),4),((4,26),2),((4,27),8),((4,28),5),((4,29),3),((4,30),1),((4,31),7),((4,32),9),((4,33),3),((4,34),8),((4,35),5),((4,36),4),((4,37),9),((4,38),6),((4,39),4),((4,40),2),((4,41),8),((4,42),0),((4,43),4),((4,44),9),((4,45),7),((4,46),5),((4,47),0),((4,48),7),((4,49),5),((5,0),6),((5,1),8),((5,2),2),((5,3),4),((5,4),2),((5,5),3),((5,6),2),((5,7),3),((5,8),4),((5,9),6),((5,10),7),((5,11),9),((5,12),3),((5,13),5),((5,14),3),((5,15),4),((5,16),3),((5,17),4),((5,18),6),((5,19),7),((5,20),8),((5,21),0),((5,22),4),((5,23),6),((5,24),4),((5,25),5),((5,26),4),((5,27),6),((5,28),7),((5,29),8),((5,30),9),((5,31),1),((5,32),5),((5,33),7),((5,34),5),((5,35),6),((5,36),6),((5,37),7),((5,38),8),((5,39),9),((5,40),0),((5,41),2),((5,42),6),((5,43),8),((5,44),6),((5,45),8),((5,46),7),((5,47),8),((5,48),9),((5,49),0),((6,0),2),((6,1),4),((6,2),2),((6,3),2),((6,4),8),((6,5),9),((6,6),3),((6,7),2),((6,8),9),((6,9),6),((6,10),3),((6,11),5),((6,12),3),((6,13),3),((6,14),9),((6,15),0),((6,16),4),((6,17),3),((6,18),1),((6,19),7),((6,20),4),((6,21),6),((6,22),4),((6,23),4),((6,24),0),((6,25),1),((6,26),5),((6,27),5),((6,28),2),((6,29),8),((6,30),5),((6,31),7),((6,32),5),((6,33),5),((6,34),1),((6,35),2),((6,36),7),((6,37),6),((6,38),3),((6,39),9),((6,40),6),((6,41),8),((6,42),6),((6,43),6),((6,44),2),((6,45),4),((6,46),8),((6,47),7),((6,48),4),((6,49),0),((7,0),8),((7,1),7),((7,2),4),((7,3),6),((7,4),2),((7,5),2),((7,6),5),((7,7),7),((7,8),6),((7,9),7),((7,10),9),((7,11),8),((7,12),5),((7,13),7),((7,14),3),((7,15),3),((7,16),6),((7,17),8),((7,18),8),((7,19),8),((7,20),0),((7,21),9),((7,22),6),((7,23),8),((7,24),4),((7,25),4),((7,26),7),((7,27),0),((7,28),9),((7,29),9),((7,30),1),((7,31),0),((7,32),7),((7,33),9),((7,34),5),((7,35),5),((7,36),9),((7,37),1),((7,38),0),((7,39),0),((7,40),2),((7,41),1),((7,42),8),((7,43),0),((7,44),6),((7,45),7),((7,46),0),((7,47),2),((7,48),1),((7,49),1),((8,0),5),((8,1),8),((8,2),3),((8,3),7),((8,4),2),((8,5),4),((8,6),3),((8,7),4),((8,8),3),((8,9),0),((8,10),6),((8,11),9),((8,12),4),((8,13),8),((8,14),3),((8,15),5),((8,16),4),((8,17),5),((8,18),5),((8,19),1),((8,20),7),((8,21),0),((8,22),5),((8,23),9),((8,24),4),((8,25),6),((8,26),5),((8,27),7),((8,28),6),((8,29),2),((8,30),8),((8,31),1),((8,32),6),((8,33),0),((8,34),5),((8,35),7),((8,36),7),((8,37),8),((8,38),7),((8,39),3),((8,40),9),((8,41),2),((8,42),7),((8,43),1),((8,44),6),((8,45),9),((8,46),8),((8,47),9),((8,48),8),((8,49),4),((9,0),4),((9,1),4),((9,2),0),((9,3),1),((9,4),3),((9,5),9),((9,6),3),((9,7),1),((9,8),3),((9,9),3),((9,10),4),((9,11),4),((9,12),0),((9,13),1),((9,14),3),((9,15),9),((9,16),3),((9,17),1),((9,18),4),((9,19),4),((9,20),5),((9,21),5),((9,22),1),((9,23),2),((9,24),4),((9,25),0),((9,26),4),((9,27),3),((9,28),5),((9,29),5),((9,30),6),((9,31),6),((9,32),2),((9,33),3),((9,34),5),((9,35),1),((9,36),6),((9,37),4),((9,38),6),((9,39),6),((9,40),7),((9,41),7),((9,42),3),((9,43),4),((9,44),6),((9,45),3),((9,46),7),((9,47),5),((9,48),7),((9,49),7),((10,0),3),((10,1),3),((10,2),4),((10,3),5),((10,4),9),((10,5),3),((10,6),3),((10,7),5),((10,8),3),((10,9),4),((10,10),3),((10,11),3),((10,12),4),((10,13),5),((10,14),9),((10,15),3),((10,16),3),((10,17),5),((10,18),4),((10,19),5),((10,20),4),((10,21),4),((10,22),5),((10,23),6),((10,24),0),((10,25),4),((10,2Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> a
array ((0,0),(9,9)) [((0,0),1),((0,1),1),((0,2),2),((0,3),3),((0,4),7),((0,5),1),((0,6),1),((0,7),3),((0,8),1),((0,9),2),((1,0),1),((1,1),3),((1,2),1),((1,3),6),((1,4),4),((1,5),3),((1,6),3),((1,7),1),((1,8),2),((1,9),3),((2,0),6),((2,1),8),((2,2),3),((2,3),9),((2,4),6),((2,5),1),((2,6),5),((2,7),2),((2,8),9),((2,9),1),((3,0),3),((3,1),1),((3,2),6),((3,3),4),((3,4),3),((3,5),9),((3,6),9),((3,7),5),((3,8),3),((3,9),1),((4,0),7),((4,1),3),((4,2),5),((4,3),9),((4,4),4),((4,5),1),((4,6),9),((4,7),4),((4,8),1),((4,9),9),((5,0),5),((5,1),7),((5,2),1),((5,3),3),((5,4),1),((5,5),2),((5,6),1),((5,7),2),((5,8),3),((5,9),4),((6,0),1),((6,1),3),((6,2),1),((6,3),1),((6,4),7),((6,5),8),((6,6),2),((6,7),1),((6,8),8),((6,9),4),((7,0),7),((7,1),6),((7,2),3),((7,3),5),((7,4),1),((7,5),1),((7,6),4),((7,7),6),((7,8),5),((7,9),5),((8,0),4),((8,1),7),((8,2),2),((8,3),6),((8,4),1),((8,5),3),((8,6),2),((8,7),3),((8,8),2),((8,9),8),((9,0),2),((9,1),2),((9,2),8),((9,3),9),((9,4),1),((9,5),7),((9,6),1),((9,7),9),((9,8),1),((9,9),1)]
Prelude Data.Array Data.List Data.Function Data.Ix>
Prelude Data.Array Data.List Data.Function Data.Ix> both (`mod` (9 + 1)) (0,0)
(0,0)
Prelude Data.Array Data.List Data.Function Data.Ix> a ! (0,0)
1
Prelude Data.Array Data.List Data.Function Data.Ix> max 0 0 `div` 9 + 1
1
Prelude Data.Array Data.List Data.Function Data.Ix> max 0 0 `div` (9 + 1)
0
Prelude Data.Array Data.List Data.Function Data.Ix> (max 0 0) `div` 9 + 1
1
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), ((ar ! both (`mod` (w + 1)) (x,y)) + (max x y `div` (w + 1))) `mod` 10) | x <- [0..scalen w], y <- [0..scalen h]]
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen a
array ((0,0),(49,49)) [((0,0),1),((0,1),1),((0,2),2),((0,3),3),((0,4),7),((0,5),1),((0,6),1),((0,7),3),((0,8),1),((0,9),2),((0,10),2),((0,11),2),((0,12),3),((0,13),4),((0,14),8),((0,15),2),((0,16),2),((0,17),4),((0,18),2),((0,19),3),((0,20),3),((0,21),3),((0,22),4),((0,23),5),((0,24),9),((0,25),3),((0,26),3),((0,27),5),((0,28),3),((0,29),4),((0,30),4),((0,31),4),((0,32),5),((0,33),6),((0,34),0),((0,35),4),((0,36),4),((0,37),6),((0,38),4),((0,39),5),((0,40),5),((0,41),5),((0,42),6),((0,43),7),((0,44),1),((0,45),5),((0,46),5),((0,47),7),((0,48),5),((0,49),6),((1,0),1),((1,1),3),((1,2),1),((1,3),6),((1,4),4),((1,5),3),((1,6),3),((1,7),1),((1,8),2),((1,9),3),((1,10),2),((1,11),4),((1,12),2),((1,13),7),((1,14),5),((1,15),4),((1,16),4),((1,17),2),((1,18),3),((1,19),4),((1,20),3),((1,21),5),((1,22),3),((1,23),8),((1,24),6),((1,25),5),((1,26),5),((1,27),3),((1,28),4),((1,29),5),((1,30),4),((1,31),6),((1,32),4),((1,33),9),((1,34),7),((1,35),6),((1,36),6),((1,37),4),((1,38),5),((1,39),6),((1,40),5),((1,41),7),((1,42),5),((1,43),0),((1,44),8),((1,45),7),((1,46),7),((1,47),5),((1,48),6),((1,49),7),((2,0),6),((2,1),8),((2,2),3),((2,3),9),((2,4),6),((2,5),1),((2,6),5),((2,7),2),((2,8),9),((2,9),1),((2,10),7),((2,11),9),((2,12),4),((2,13),0),((2,14),7),((2,15),2),((2,16),6),((2,17),3),((2,18),0),((2,19),2),((2,20),8),((2,21),0),((2,22),5),((2,23),1),((2,24),8),((2,25),3),((2,26),7),((2,27),4),((2,28),1),((2,29),3),((2,30),9),((2,31),1),((2,32),6),((2,33),2),((2,34),9),((2,35),4),((2,36),8),((2,37),5),((2,38),2),((2,39),4),((2,40),0),((2,41),2),((2,42),7),((2,43),3),((2,44),0),((2,45),5),((2,46),9),((2,47),6),((2,48),3),((2,49),5),((3,0),3),((3,1),1),((3,2),6),((3,3),4),((3,4),3),((3,5),9),((3,6),9),((3,7),5),((3,8),3),((3,9),1),((3,10),4),((3,11),2),((3,12),7),((3,13),5),((3,14),4),((3,15),0),((3,16),0),((3,17),6),((3,18),4),((3,19),2),((3,20),5),((3,21),3),((3,22),8),((3,23),6),((3,24),5),((3,25),1),((3,26),1),((3,27),7),((3,28),5),((3,29),3),((3,30),6),((3,31),4),((3,32),9),((3,33),7),((3,34),6),((3,35),2),((3,36),2),((3,37),8),((3,38),6),((3,39),4),((3,40),7),((3,41),5),((3,42),0),((3,43),8),((3,44),7),((3,45),3),((3,46),3),((3,47),9),((3,48),7),((3,49),5),((4,0),7),((4,1),3),((4,2),5),((4,3),9),((4,4),4),((4,5),1),((4,6),9),((4,7),4),((4,8),1),((4,9),9),((4,10),8),((4,11),4),((4,12),6),((4,13),0),((4,14),5),((4,15),2),((4,16),0),((4,17),5),((4,18),2),((4,19),0),((4,20),9),((4,21),5),((4,22),7),((4,23),1),((4,24),6),((4,25),3),((4,26),1),((4,27),6),((4,28),3),((4,29),1),((4,30),0),((4,31),6),((Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), max 1 (((ar ! both (`mod` (w + 1)) (x,y)) + (max x y `div` (w + 1))) `mod` 10)) | x <- [0..scalen w], y <- [0..scalen h]]
Prelude Data.Array Data.List Data.Function Data.Ix> enlargen a
array ((0,0),(49,49)) [((0,0),1),((0,1),1),((0,2),2),((0,3),3),((0,4),7),((0,5),1),((0,6),1),((0,7),3),((0,8),1),((0,9),2),((0,10),2),((0,11),2),((0,12),3),((0,13),4),((0,14),8),((0,15),2),((0,16),2),((0,17),4),((0,18),2),((0,19),3),((0,20),3),((0,21),3),((0,22),4),((0,23),5),((0,24),9),((0,25),3),((0,26),3),((0,27),5),((0,28),3),((0,29),4),((0,30),4),((0,31),4),((0,32),5),((0,33),6),((0,34),1),((0,35),4),((0,36),4),((0,37),6),((0,38),4),((0,39),5),((0,40),5),((0,41),5),((0,42),6),((0,43),7),((0,44),1),((0,45),5),((0,46),5),((0,47),7),((0,48),5),((0,49),6),((1,0),1),((1,1),3),((1,2),1),((1,3),6),((1,4),4),((1,5),3),((1,6),3),((1,7),1),((1,8),2),((1,9),3),((1,10),2),((1,11),4),((1,12),2),((1,13),7),((1,14),5),((1,15),4),((1,16),4),((1,17),2),((1,18),3),((1,19),4),((1,20),3),((1,21),5),((1,22),3),((1,23),8),((1,24),6),((1,25),5),((1,26),5),((1,27),3),((1,28),4),((1,29),5),((1,30),4),((1,31),6),((1,32),4),((1,33),9),((1,34),7),((1,35),6),((1,36),6),((1,37),4),((1,38),5),((1,39),6),((1,40),5),((1,41),7),((1,42),5),((1,43),1),((1,44),8),((1,45),7),((1,46),7),((1,47),5),((1,48),6),((1,49),7),((2,0),6),((2,1),8),((2,2),3),((2,3),9),((2,4),6),((2,5),1),((2,6),5),((2,7),2),((2,8),9),((2,9),1),((2,10),7),((2,11),9),((2,12),4),((2,13),1),((2,14),7),((2,15),2),((2,16),6),((2,17),3),((2,18),1),((2,19),2),((2,20),8),((2,21),1),((2,22),5),((2,23),1),((2,24),8),((2,25),3),((2,26),7),((2,27),4),((2,28),1),((2,29),3),((2,30),9),((2,31),1),((2,32),6),((2,33),2),((2,34),9),((2,35),4),((2,36),8),((2,37),5),((2,38),2),((2,39),4),((2,40),1),((2,41),2),((2,42),7),((2,43),3),((2,44),1),((2,45),5),((2,46),9),((2,47),6),((2,48),3),((2,49),5),((3,0),3),((3,1),1),((3,2),6),((3,3),4),((3,4),3),((3,5),9),((3,6),9),((3,7),5),((3,8),3),((3,9),1),((3,10),4),((3,11),2),((3,12),7),((3,13),5),((3,14),4),((3,15),1),((3,16),1),((3,17),6),((3,18),4),((3,19),2),((3,20),5),((3,21),3),((3,22),8),((3,23),6),((3,24),5),((3,25),1),((3,26),1),((3,27),7),((3,28),5),((3,29),3),((3,30),6),((3,31),4),((3,32),9),((3,33),7),((3,34),6),((3,35),2),((3,36),2),((3,37),8),((3,38),6),((3,39),4),((3,40),7),((3,41),5),((3,42),1),((3,43),8),((3,44),7),((3,45),3),((3,46),3),((3,47),9),((3,48),7),((3,49),5),((4,0),7),((4,1),3),((4,2),5),((4,3),9),((4,4),4),((4,5),1),((4,6),9),((4,7),4),((4,8),1),((4,9),9),((4,10),8),((4,11),4),((4,12),6),((4,13),1),((4,14),5),((4,15),2),((4,16),1),((4,17),5),((4,18),2),((4,19),1),((4,20),9),((4,21),5),((4,22),7),((4,23),1),((4,24),6),((4,25),3),((4,26),1),((4,27),6),((4,28),3),((4,29),1),((4,30),1),((4,31),6),((4,32),8),((4,33),2),((4,34),7),((4,35),4),((4,36),2),((4,37),7),((4,38),4),((4,39),2),((4,40),1),((4,41),7),((4,42),9),((4,43),3),((4,44),8),((4,45),5),((4,46),3),((4,47),8),((4,48),5),((4,49),3),((5,0),5),((5,1),7),((5,2),1),((5,3),3),((5,4),1),((5,5),2),((5,6),1),((5,7),2),((5,8),3),((5,9),4),((5,10),6),((5,11),8),((5,12),2),((5,13),4),((5,14),2),((5,15),3),((5,16),2),((5,17),3),((5,18),4),((5,19),5),((5,20),7),((5,21),9),((5,22),3),((5,23),5),((5,24),3),((5,25),4),((5,26),3),((5,27),4),((5,28),5),((5,29),6),((5,30),8),((5,31),1),((5,32),4),((5,33),6),((5,34),4),((5,35),5),((5,36),4),((5,37),5),((5,38),6),((5,39),7),((5,40),9),((5,41),1),((5,42),5),((5,43),7),((5,44),5),((5,45),6),((5,46),5),((5,47),6),((5,48),7),((5,49),8),((6,0),1),((6,1),3),((6,2),1),((6,3),1),((6,4),7),((6,5),8),((6,6),2),((6,7),1),((6,8),8),((6,9),4),((6,10),2),((6,11),4),((6,12),2),((6,13),2),((6,14),8),((6,15),9),((6,16),3),((6,17),2),((6,18),9),((6,19),5),((6,20),3),((6,21),5),((6,22),3),((6,23),3),((6,24),9),((6,25),1),((6,26),4),((6,27),3),((6,28),1),((6,29),6),((6,30),4),((6,31),6),((6,32),4),((6,33),4),((6,34),1),((6,35),1),((6,36),5),((6,37),4),((6,38),1),((6,39),7),((6,40),5),((6,41),7),((6,42),5),((6,43),5),((6,44),1),((6,45),2),((6,46),6),((6,47),5),((6,48),2),((6,49),8),((7,0),7),((7,1),6),((7,2),3),((7,3),5),(Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> a' = enlargen a
Prelude Data.Array Data.List Data.Function Data.Ix> solve a'
[9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,2Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> replicate " "

<interactive>:128:11: error:
    * Couldn't match expected type `Int' with actual type `[Char]'
    * In the first argument of `replicate', namely `" "'
      In the expression: replicate " "
      In an equation for `it': it = replicate " "
Prelude Data.Array Data.List Data.Function Data.Ix> replicate 50 $ replicate 50 " "
[[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 

"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 
"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," 
"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 

"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 

"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 

"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 

"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 
"," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "," "," "," "," "," "," Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> replicate 50 $ replicate 50 ' '
["                                                  ","                                                  ","
     ","                                                  ","                                                  ","
           ","                                                  ","                                                  ","
                 ","                                                  ","                                                  ","
                       ","                                                  ","                                                  ","
                             ","                                                  ","                                                  ","
                                   ","                                                  ","                                                  ","
                                         ","                                                  ","                                                  ","   
                                               ","                                                  ","
","                                                  ","                                                  ","
      ","                                                  ","             Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> foldl' (\s ((x,y),c) -> zipWith (\y row -> zipWith (\x _ -> )) [.]) (replicate 50 $ replicate 50 ' ')
<interactive>:131:61: error: parse error on input `)'
Prelude Data.Array Data.List Data.Function Data.Ix> foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' _ -> if (x,y) == (x',y') then head $ show c 
else _) [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ')

<interactive>:132:107: error:
    * Found hole: _ :: Char
    * In the expression: _
      In the expression: if (x, y) == (x', y') then head $ show c else _
      In the first argument of `zipWith', namely
        `(\ x' _ -> if (x, y) == (x', y') then head $ show c else _)'
    * Relevant bindings include
        x' :: a (bound at <interactive>:132:55)
        row :: [Char] (bound at <interactive>:132:38)
        y' :: b (bound at <interactive>:132:35)
        c :: a1 (bound at <interactive>:132:19)
        y :: b (bound at <interactive>:132:16)
        x :: a (bound at <interactive>:132:14)
        it :: t ((a, b), a1) -> [[Char]] (bound at <interactive>:132:1)
        (Some bindings suppressed; use -fmax-relevant-binds=N or -fno-max-relevant-binds)
      Constraints include
        Foldable t (from <interactive>:132:1-162)
        Eq a (from <interactive>:132:1-162)
        Eq b (from <interactive>:132:1-162)
        Show a1 (from <interactive>:132:1-162)
        Num a (from <interactive>:132:1-162)
        Num b (from <interactive>:132:1-162)
        Enum a (from <interactive>:132:1-162)
        Enum b (from <interactive>:132:1-162)
      Valid hole fits include
        maxBound :: forall a. Bounded a => a
          with maxBound @Char
          (imported from `Prelude' (and originally defined in `GHC.Enum'))
        minBound :: forall a. Bounded a => a
          with minBound @Char
          (imported from `Prelude' (and originally defined in `GHC.Enum'))
Prelude Data.Array Data.List Data.Function Data.Ix> foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ')

<interactive>:133:1: error:
    * No instance for (Show ([((Integer, Integer), ())] -> [[Char]]))
        arising from a use of `print'
        (maybe you haven't applied a function to enough arguments?)
    * In a stmt of an interactive GHCi command: print it
Prelude Data.Array Data.List Data.Function Data.Ix> foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') a'

<interactive>:134:166: error:
    * No instance for (Integral ((Integer, Integer), ()))
        arising from a use of a'
    * In the third argument of foldl', namely a'
      In the expression:
        foldl'
          (\ s ((x, y), c)
             -> zipWith
                  (\ y' row
                     -> zipWith
                          (\ x' c' -> if (x, y) == (x', y') then head $ show c else c')
                          [0 .. ] row)
                  [0 .. ] s)
          (replicate 50 $ replicate 50 ' ') a'
      In an equation for `it':
          it
            = foldl'
                (\ s ((x, y), c)
                   -> zipWith
                        (\ y' row
                           -> zipWith
                                (\ x' c' -> if ... == ... then head $ show c else c') [0 .. ] row)
                        [0 .. ] s)
                (replicate 50 $ replicate 50 ' ') a'
Prelude Data.Array Data.List Data.Function Data.Ix> foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') $ assocs a'
["11637517422274862853338597396444961841755517195186","13813736722492484783351359589446146169155725717116","21365113283247622439435873354154698446516571955762","36949315694715142671581615378169272648927138375913","74634171118574528222968563933317967414441817851555","13191281372421239248353134135946424514615753562571","13599124212461123532357113464346822457545793356865","31254216394236532741534764385164587549627569865173","12931385212314249632341535174345264618545637572965","23119445813422155692453316671356442778146755388925","22748628532274862853338597396444961841755517195186","24924847832492484783351359589446146169155725717116","32476224393247622439435873354154698446516571955762","47151426714715142671581615378169272648927138375913","85745282228574528222968563933317967414441817851555","24212392482421239248353134135946424514615753562571","24611235322461123532357113464346822457545793356865","42365327414236532741534764385164587549627569865173","23142496322314249632341535174345264618545637572965","34221556923422155692453316671356442778146755388925","33859739643385973964338597396444961841755517195186","35135958943513595894351359589446146169155725717116","43587335414358733541435873354154698446516571955762","58161537815816153781581615378169272648927138375913","96856393339685639333968563933317967414441817851555","35313413593531341359353134135946424514615753562571","35711346433571134643357113464346822457545793356865","53476438515347643851534764385164587549627569865173","34153517433415351743341535174345264618545637572965","45331667134533166713453316671356442778146755388925","44961841754496184175449618417544961841755517195186","46146169154614616915461461691546146169155725717116","546984465154698446515469844651546984Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> putStrLn . unlines . foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') $ assocs a'
11637517422274862853338597396444961841755517195186
13813736722492484783351359589446146169155725717116
21365113283247622439435873354154698446516571955762
36949315694715142671581615378169272648927138375913
74634171118574528222968563933317967414441817851555
13191281372421239248353134135946424514615753562571
13599124212461123532357113464346822457545793356865
31254216394236532741534764385164587549627569865173
12931385212314249632341535174345264618545637572965
23119445813422155692453316671356442778146755388925
22748628532274862853338597396444961841755517195186
24924847832492484783351359589446146169155725717116
32476224393247622439435873354154698446516571955762
47151426714715142671581615378169272648927138375913
85745282228574528222968563933317967414441817851555
24212392482421239248353134135946424514615753562571
24611235322461123532357113464346822457545793356865
42365327414236532741534764385164587549627569865173
23142496322314249632341535174345264618545637572965
34221556923422155692453316671356442778146755388925
33859739643385973964338597396444961841755517195186
35135958943513595894351359589446146169155725717116
43587335414358733541435873354154698446516571955762
58161537815816153781581615378169272648927138375913
96856393339685639333968563933317967414441817851555
35313413593531341359353134135946424514615753562571
35711346433571134643357113464346822457545793356865
53476438515347643851534764385164587549627569865173
34153517433415351743341535174345264618545637572965
45331667134533166713453316671356442778146755388925
44961841754496184175449618417544961841755517195186
46146169154614616915461461691546146169155725717116
54698446515469844651546984465154698446516571955762
69272648926927264892692726489269272648927138375913
17967414441796741444179674144417967414441817851555
46424514614642451461464245146146424514615753562571
46822457544682245754468224575446822457545793356865
64587549626458754962645875496264587549627569865173
45264618544526461854452646185445264618545637572965
56442778145644277814564427781456442778146755388925
55171951865517195186551719518655171951865517195186
57257171165725717116572571711657257171165725717116
65719557626571955762657195576265719557626571955762
71383759137138375913713837591371383759137138375913
18178515551817851555181785155518178515551817851555
57535625715753562571575356257157535625715753562571
57933568655793356865579335686557933568655793356865
75698651737569865173756986517375698651737569865173
56375729655637572965563757296556375729655637572965
67553889256755388925675538892567553889256755388925

Prelude Data.Array Data.List Data.Function Data.Ix> putStrLn . unlines . foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') . assocs $ enlargen

<interactive>:137:198: error:
    * Couldn't match expected type `Array (a1, b0) a0'
                  with actual type `Array (e0, e0) e0 -> Array (e0, e0) e0'
    * Probable cause: `enlargen' is applied to too few arguments
      In the second argument of `($)', namely `enlargen'
      In the expression:
        putStrLn
          . unlines
              . foldl'
                  (\ s ((x, y), c)
                     -> zipWith
                          (\ y' row
                             -> zipWith
                                  (\ x' c' -> if (x, y) == (x', y') then head $ show c else c')
                                  [0 .. ] row)
                          [0 .. ] s)
                  (replicate 50 $ replicate 50 ' ')
                  . assocs
          $ enlargen
      In an equation for `it':
          it
            = putStrLn
                . unlines
                    . foldl'
                        (\ s ((x, y), c)
                           -> zipWith
                                (\ y' row
                                   -> zipWith
                                        (\ x' c' -> if ... == ... then head $ show c else c')
                                        [0 .. ] row)
                                [0 .. ] s)
                        (replicate 50 $ replicate 50 ' ')
                        . assocs
                $ enlargen
Prelude Data.Array Data.List Data.Function Data.Ix> putStrLn . unlines . foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') . assocs $ enlargen a
11637517422274862853338597396444961841755517195186
13813736722492484783351359589446146169155725717116
21365113283247622439435873354154698446516571955762
36949315694715142671581615378169272648927138375913
74634171118574528222968563933317967414441817851555
13191281372421239248353134135946424514615753562571
13599124212461123532357113464346822457545793356865
31254216394236532741534764385164587549627569865173
12931385212314249632341535174345264618545637572965
23119445813422155692453316671356442778146755388925
22748628532274862853338597396444961841755517195186
24924847832492484783351359589446146169155725717116
32476224393247622439435873354154698446516571955762
47151426714715142671581615378169272648927138375913
85745282228574528222968563933317967414441817851555
24212392482421239248353134135946424514615753562571
24611235322461123532357113464346822457545793356865
42365327414236532741534764385164587549627569865173
23142496322314249632341535174345264618545637572965
34221556923422155692453316671356442778146755388925
33859739643385973964338597396444961841755517195186
35135958943513595894351359589446146169155725717116
43587335414358733541435873354154698446516571955762
58161537815816153781581615378169272648927138375913
96856393339685639333968563933317967414441817851555
35313413593531341359353134135946424514615753562571
35711346433571134643357113464346822457545793356865
53476438515347643851534764385164587549627569865173
34153517433415351743341535174345264618545637572965
45331667134533166713453316671356442778146755388925
44961841754496184175449618417544961841755517195186
46146169154614616915461461691546146169155725717116
54698446515469844651546984465154698446516571955762
69272648926927264892692726489269272648927138375913
17967414441796741444179674144417967414441817851555
46424514614642451461464245146146424514615753562571
46822457544682245754468224575446822457545793356865
64587549626458754962645875496264587549627569865173
45264618544526461854452646185445264618545637572965
56442778145644277814564427781456442778146755388925
55171951865517195186551719518655171951865517195186
57257171165725717116572571711657257171165725717116
65719557626571955762657195576265719557626571955762
71383759137138375913713837591371383759137138375913
18178515551817851555181785155518178515551817851555
57535625715753562571575356257157535625715753562571
57933568655793356865579335686557933568655793356865
75698651737569865173756986517375698651737569865173
56375729655637572965563757296556375729655637572965
67553889256755388925675538892567553889256755388925

Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), max 1 (((ar ! both (`mod` (w + 1)) (x,y)) + (x `div` (w + 1) + y `div` (h + 1))) `mod` 10)) | x <- [0..scalen w], y <- [0..scalen h]]
Prelude Data.Array Data.List Data.Function Data.Ix> putStrLn . unlines . foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') . assocs $ enlargen a
11637517422274862853338597396444961841755517195186
13813736722492484783351359589446146169155725717116
21365113283247622439435873354154698446516571955762
36949315694715142671581615378169272648927138375913
74634171118574528222968563933317967414441817851555
13191281372421239248353134135946424514615753562571
13599124212461123532357113464346822457545793356865
31254216394236532741534764385164587549627569865173
12931385212314249632341535174345264618545637572965
23119445813422155692453316671356442778146755388925
22748628533385973964449618417555171951866618216297
24924847833513595894461461691557257171166836828127
32476224394358733541546984465165719557627681166873
47151426715816153781692726489271383759138149486114
85745282229685639333179674144418178515552918962666
24212392483531341359464245146157535625716864673682
24611235323571134643468224575457933568656814467976
42365327415347643851645875496275698651738671976184
23142496323415351743452646185456375729656748683176
34221556924533166713564427781467553889257866499136
33859739644496184175551719518666182162977729317318
35135958944614616915572571711668368281277947939238
43587335415469844651657195576276811668738792177984
58161537816927264892713837591381494861149251597125
96856393331796741444181785155529189626663129173777
35313413594642451461575356257168646736827975784793
35711346434682245754579335686568144679767915578187
53476438516458754962756986517386719761849781187295
34153517434526461854563757296567486831767859794187
45331667135644277814675538892578664991368977511147
44961841755517195186661821629777293173188831428419
46146169155725717116683682812779479392388158141349
54698446516571955762768116687387921779849813288195
69272648927138375913814948611492515971251361618236
17967414441817851555291896266631291737774131184888
46424514615753562571686467368279757847938186895814
46822457545793356865681446797679155781878126689198
64587549627569865173867197618497811872951892198316
45264618545637572965674868317678597941878961815298
56442778146755388925786649913689775111479188611258
55171951866618216297772931731888314284199941539521
57257171166836828127794793923881581413499169151451
65719557627681166873879217798498132881951914399116
71383759138149486114925159712513616182361472719347
18178515552918962666312917377741311848885241295999
57535625716864673682797578479381868958149197916915
57933568656814467976791557818781266891989137791219
75698651738671976184978118729518921983161913219417
56375729656748683176785979418789618152989171916319
67553889257866499136897751114791886112581199722369

Prelude Data.Array Data.List Data.Function Data.Ix> enlargen ar = let bs@(_,(w,h)) = bounds ar in array ((0,0), (scalen w, scalen h)) $ [((x,y), let n = 
((ar ! both (`mod` (w + 1)) (x,y)) + (x `div` (w + 1) + y `div` (h + 1))) in (n `mod` 10) + n `div` 10) | x <- [0..scalen w], y <- [0..scalen h]]
Prelude Data.Array Data.List Data.Function Data.Ix> putStrLn . unlines . foldl' (\s ((x,y),c) -> zipWith (\y' row -> zipWith (\x' c' -> if (x,y) == (x',y') then head $ show c else c') [0..] row) [0..] s) (replicate 50 $ replicate 50 ' ') . assocs $ enlargen a
11637517422274862853338597396444961841755517295286
13813736722492484783351359589446246169155735727126
21365113283247622439435873354154698446526571955763
36949315694715142671582625378269373648937148475914
74634171118574528222968563933317967414442817852555
13191281372421239248353234135946434524615754563572
13599124212461123532357223464346833457545794456865
31254216394236532741534764385264587549637569865174
12931385212314249632342535174345364628545647573965
23119445813422155692453326671356443778246755488935
22748628533385973964449618417555172952866628316397
24924847833513595894462461691557357271266846838237
32476224394358733541546984465265719557637682166874
47151426715826253782693736489371484759148259586125
85745282229685639333179674144428178525553928963666
24212392483532341359464345246157545635726865674683
24611235323572234643468334575457944568656815567976
42365327415347643852645875496375698651748671976285
23142496323425351743453646285456475739656758684176
34221556924533266713564437782467554889357866599146
33859739644496184175551729528666283163977739427418
35135958944624616915573572712668468382377957949348
43587335415469844652657195576376821668748793277985
58262537826937364893714847591482595861259361697236
96856393331796741444281785255539289636664139174777
35323413594643452461575456357268656746837976785794
35722346434683345754579445686568155679767926678187
53476438526458754963756986517486719762859782187396
34253517434536462854564757396567586841767869795287
45332667135644377824675548893578665991468977611257
44961841755517295286662831639777394274188841538529
46246169155735727126684683823779579493488168151459
54698446526571955763768216687487932779859814388196
69373648937148475914825958612593616972361472718347
17967414442817852555392896366641391747775241285888
46434524615754563572686567468379767857948187896815
46833457545794456865681556797679266781878137789298
64587549637569865174867197628597821873961893298417
45364628545647573965675868417678697952878971816398
56443778246755488935786659914689776112579188722368
55172952866628316397773942741888415385299952649631
57357271266846838237795794934881681514599279262561
65719557637682166874879327798598143881961925499217
71484759148259586125936169723614727183472583829458
28178525553928963666413917477752412858886352396999
57545635726865674683797678579481878968159298917926
57944568656815567976792667818781377892989248891319
75698651748671976285978218739618932984172914319528
56475739656758684176786979528789718163989182927419
67554889357866599146897761125791887223681299833479

Prelude Data.Array Data.List Data.Function Data.Ix> a' = enlargen a
Prelude Data.Array Data.List Data.Function Data.Ix> solve a'       
nterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> solve $ enlargen ar
[9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,9999,Interrupted.
Prelude Data.Array Data.List Data.Function Data.Ix> solve ar = let bs = snd $ bounds ar in map (! bs) . iterate (step ar) $ start ar
Prelude Data.Array Data.List Data.Function Data.Ix> step ar st = array (bounds ar) . pickbest . concatMap (\(p, s) -> ((p,s):) . map (\p' -> (p', s + (ar ! p'))) $ adj ar p) $ assocs st
Prelude Data.Array Data.List Data.Function Data.Ix> adj' ar p = let bs = snd $ bounds ar in right bs p ++ down bs p                                      
Prelude Data.Array Data.List Data.Function Data.Ix> step' ar st = array (bounds ar) . pickbest . concatMap (\(p, s) -> ((p,s):) . map (\p' -> (p', s + (ar ! p'))) $ adj' ar p) $ assocs st
Prelude Data.Array Data.List Data.Function Data.Ix>
Prelude Data.Array Data.List Data.Function Data.Ix> solve ar = let bs = snd $ bounds ar in map (! bs) . iterate (step ar) [((0,0),0)]

<interactive>:151:53: error:
    * Couldn't match expected type `a -> [Array (a2, b) b2]'
                  with actual type `[Array (a2, b) e]'
    * Possible cause: `iterate' is applied to too many arguments
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression: map (! bs) . iterate (step ar) [((0, 0), 0)]
      In the expression:
        let bs = snd $ bounds ar
        in map (! bs) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:151:16)
        ar :: Array (a2, b) e (bound at <interactive>:151:7)
        solve :: Array (a2, b) e -> a -> [b2]
          (bound at <interactive>:151:1)

<interactive>:151:71: error:
    * Couldn't match expected type `Array (a2, b) e'
                  with actual type `[((a0, b0), b1)]'
    * In the second argument of `iterate', namely `[((0, 0), 0)]'
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression: map (! bs) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:151:16)
        ar :: Array (a2, b) e (bound at <interactive>:151:7)
        solve :: Array (a2, b) e -> a -> [b2]
          (bound at <interactive>:151:1)
Prelude Data.Array Data.List Data.Function Data.Ix> step' ar st = pickbest . concatMap (\(p, s) -> ((p,s):) . map (\p' -> (p', s + (ar ! p'))) $ adj' ar 
p) st

<interactive>:152:26: error:
    * Couldn't match expected type `a -> [(a1, a3)]'
                  with actual type `[((a2, b), e)]'
    * Possible cause: `concatMap' is applied to too many arguments
      In the second argument of `(.)', namely
        `concatMap
           (\ (p, s)
              -> ((p, s) :) . map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
           st'
      In the expression:
        pickbest
          . concatMap
              (\ (p, s)
                 -> ((p, s) :) . map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
              st
      In an equation for step':
          step' ar st
            = pickbest
                . concatMap
                    (\ (p, s)
                       -> ((p, s) :) . map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
                    st
    * Relevant bindings include
        st :: t ((a2, b), e) (bound at <interactive>:152:10)
        ar :: Array (a2, b) e (bound at <interactive>:152:7)
        step' :: Array (a2, b) e -> t ((a2, b), e) -> a -> [(a1, a3)]
          (bound at <interactive>:152:1)
Prelude Data.Array Data.List Data.Function Data.Ix> step' ar st = pickbest . concatMap (\(p, s) -> ((p,s):) $ map (\p' -> (p', s + (ar ! p'))) $ adj' ar 
p) st

<interactive>:153:26: error:
    * Couldn't match expected type `a -> [(a1, a3)]'
                  with actual type `[((a2, b), e)]'
    * Possible cause: `concatMap' is applied to too many arguments
      In the second argument of `(.)', namely
        `concatMap
           (\ (p, s)
              -> ((p, s) :) $ map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
           st'
      In the expression:
        pickbest
          . concatMap
              (\ (p, s)
                 -> ((p, s) :) $ map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
              st
      In an equation for step':
          step' ar st
            = pickbest
                . concatMap
                    (\ (p, s)
                       -> ((p, s) :) $ map (\ p' -> (p', s + (ar ! p'))) $ adj' ar p)
                    st
    * Relevant bindings include
        st :: t ((a2, b), e) (bound at <interactive>:153:10)
        ar :: Array (a2, b) e (bound at <interactive>:153:7)
        step' :: Array (a2, b) e -> t ((a2, b), e) -> a -> [(a1, a3)]
          (bound at <interactive>:153:1)
Prelude Data.Array Data.List Data.Function Data.Ix> step' ar st = pickbest $ concatMap (\(p, s) -> ((p,s):) . map (\p' -> (p', s + (ar ! p'))) $ adj' ar 
p) st
Prelude Data.Array Data.List Data.Function Data.Ix> solve' ar = let bs = snd $ bounds ar in map (! bs) . iterate (step ar) [((0,0),0)]

<interactive>:155:54: error:
    * Couldn't match expected type `a -> [Array (a2, b) b2]'
                  with actual type `[Array (a2, b) e]'
    * Possible cause: `iterate' is applied to too many arguments
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression: map (! bs) . iterate (step ar) [((0, 0), 0)]
      In the expression:
        let bs = snd $ bounds ar
        in map (! bs) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:155:17)
        ar :: Array (a2, b) e (bound at <interactive>:155:8)
        solve' :: Array (a2, b) e -> a -> [b2]
          (bound at <interactive>:155:1)

<interactive>:155:72: error:
    * Couldn't match expected type `Array (a2, b) e'
                  with actual type `[((a0, b0), b1)]'
    * In the second argument of `iterate', namely `[((0, 0), 0)]'
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression: map (! bs) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:155:17)
        ar :: Array (a2, b) e (bound at <interactive>:155:8)
        solve' :: Array (a2, b) e -> a -> [b2]
          (bound at <interactive>:155:1)
Prelude Data.Array Data.List Data.Function Data.Ix> solve' ar = let (x,y) = snd $ bounds ar in map (!! y !! x) . iterate (step ar) [((0,0),0)]

<interactive>:156:48: error:
    The operator `!!' [infixl 9] of a section
        must have lower precedence than that of the operand,
          namely `!!' [infixl 9]
        in the section: `!! y !! x'
Prelude Data.Array Data.List Data.Function Data.Ix> solve' ar = let (x,y) = snd $ bounds ar in map ((!! x) . (!! y)) . iterate (step ar) [((0,0),0)]

<interactive>:157:68: error:
    * Couldn't match expected type `a -> [[[b]]]'
                  with actual type `[Array (Int, Int) e]'
    * Possible cause: `iterate' is applied to too many arguments
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression:
        map ((!! x) . (!! y)) . iterate (step ar) [((0, 0), 0)]
      In the expression:
        let (x, y) = snd $ bounds ar
        in map ((!! x) . (!! y)) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        ar :: Array (Int, Int) e (bound at <interactive>:157:8)
        solve' :: Array (Int, Int) e -> a -> [b]
          (bound at <interactive>:157:1)

<interactive>:157:86: error:
    * Couldn't match expected type `Array (Int, Int) e'
                  with actual type `[((a0, b0), b1)]'
    * In the second argument of `iterate', namely `[((0, 0), 0)]'
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression:
        map ((!! x) . (!! y)) . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        ar :: Array (Int, Int) e (bound at <interactive>:157:8)
        solve' :: Array (Int, Int) e -> a -> [b]
          (bound at <interactive>:157:1)
Prelude Data.Array Data.List Data.Function Data.Ix> solve' ar = let bs= snd $ bounds ar in map (fro find ((== bs) . fst)) . iterate (step ar) [((0,0),0)]
<interactive>:158:20: error: parse error on input `='
Prelude Data.Array Data.List Data.Function Data.Ix> solve' ar = let bs = snd $ bounds ar in map (fromJust . find ((== bs) . fst)) . iterate (step ar) [((0,0),0)]

<interactive>:159:46: error:
    Variable not in scope: fromJust :: Maybe ((a2, b), b0) -> b3
Prelude Data.Array Data.List Data.Function Data.Ix> import Data.Maybe
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (fromJust . find ((== bs) . fst)) . iterate (step ar) [((0,0),0)]

<interactive>:161:81: error:
    * Couldn't match expected type `a -> [t0 ((a2, b), b2)]'
                  with actual type `[Array (a2, b) e]'
    * Possible cause: `iterate' is applied to too many arguments
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression:
        map (fromJust . find ((== bs) . fst))
          . iterate (step ar) [((0, 0), 0)]
      In the expression:
        let bs = snd $ bounds ar
        in
          map (fromJust . find ((== bs) . fst))
            . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:161:17)
        ar :: Array (a2, b) e (bound at <interactive>:161:8)
        solve' :: Array (a2, b) e -> a -> [((a2, b), b2)]
          (bound at <interactive>:161:1)

<interactive>:161:99: error:
    * Couldn't match expected type `Array (a2, b) e'
                  with actual type `[((a0, b0), b1)]'
    * In the second argument of `iterate', namely `[((0, 0), 0)]'
      In the second argument of `(.)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression:
        map (fromJust . find ((== bs) . fst))
          . iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:161:17)
        ar :: Array (a2, b) e (bound at <interactive>:161:8)
        solve' :: Array (a2, b) e -> a -> [((a2, b), b2)]
          (bound at <interactive>:161:1)
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (fromJust . find ((== bs) . fst)) $ iterate (step ar) [((0,0),0)]

<interactive>:162:99: error:
    * Couldn't match expected type `Array (a2, b) ((a2, b), b2)'
                  with actual type `[((a0, b0), b1)]'
    * In the second argument of `iterate', namely `[((0, 0), 0)]'
      In the second argument of `($)', namely
        `iterate (step ar) [((0, 0), 0)]'
      In the expression:
        map (fromJust . find ((== bs) . fst))
          $ iterate (step ar) [((0, 0), 0)]
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:162:17)
        ar :: Array (a2, b) ((a2, b), b2) (bound at <interactive>:162:8)
        solve' :: Array (a2, b) ((a2, b), b2) -> [((a2, b), b2)]
          (bound at <interactive>:162:1)
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (fromJust . find ((== bs) . fst)) $ iterate (step' ar) [((0,0),0)]
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' a
[*** Exception: Maybe.fromJust: Nothing
CallStack (from HasCallStack):
  error, called at libraries\base\Data\Maybe.hs:148:21 in base:Data.Maybe
  fromJust, called at <interactive>:163:46 in interactive:Ghci90
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (find ((== bs) . fst)) $ iterate (step' ar) [((0,0),0)]
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' a
[Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just 
((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just 
((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just 
((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just 
((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),Just ((9,9),40),JInterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (map snd . find ((== bs) . fst)) $ iterate (step' ar) [((0,0),0)]

<interactive>:167:56: error:
    * Couldn't match type `Maybe ((a2, b), e)' with `[(a0, b1)]'
      Expected type: [((a2, b), e)] -> [(a0, b1)]
        Actual type: [((a2, b), e)] -> Maybe ((a2, b), e)
    * In the second argument of `(.)', namely `find ((== bs) . fst)'
      In the first argument of `map', namely
        `(map snd . find ((== bs) . fst))'
      In the expression: map (map snd . find ((== bs) . fst))
    * Relevant bindings include
        bs :: (a2, b) (bound at <interactive>:167:17)
        ar :: Array (a2, b) e (bound at <interactive>:167:8)
        solve' :: Array (a2, b) e -> [[b1]] (bound at <interactive>:167:1)
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar = let bs = snd $ bounds ar in map (fmap snd . find ((== bs) . fst)) $ iterate (step' ar) [((0,0),0)]
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' a
[Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,Just 40,JusInterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe> solve' ar
[Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothingnterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe>solve $ enlargen ar
nterrupted.
Prelude Data.Array Data.List Data.Function Data.Ix Data.Maybe>