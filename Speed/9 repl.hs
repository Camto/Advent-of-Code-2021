34589999899876578954329999875432124679945698756767\n9989237999996989234567976431019888943498955989998545678989906987689965410199764321012989896799999879\n8978956789997892146678986542239767832487996792987656789679215698896894321989875754123456797899989992\n7867897899989921012349597953398756721276789891098767896598924599965789939878996543254597898998978991\n5658998979876432124692398965986543210345996999239878965487895987654597898965987654765678949987959889\n4234789767987543235789459896798765321267894878945989874356789998783456987954599875676989657995349778\n2123679854987674347896569789999876543458943467956999995245894987632969876843456996787899969986234567\n3012568966998989498987998677899987754567892458969899874348943986549898765652345987998999898942123679\n6123456799879996579999899576789999869678943467899789965457921098798789854321234598949998677991014589\n5434767959767987898998765435699987998789765598923679876767892349987698765210349899659986566789323899\n8545679943854598986987654324589996689896986679013459989888999959876579894321235789898975345678946789\n7676899892123999875698763215679965456965498793223598794999998799975467965452347999987654234599659899\n8989986799019887654679974323467896568942349954334987653234987678894359879643458969876542123689898988\n9798865678998765712578985454598987979321257895455798852109895467789234998754569653999892012567987877\n7697654367897654323456798579689898989910969999579999743219654347689945679967679999549764123456896556\n3598765456998768974567987689795679099899898997678987654498653201567896989898798878934965236587974449\n2359987767999899765978998999964589298787656789989398765789765443489989899789897767949874347678953237\n1491299879999999987889459329899999987654745894590249876899899865679876784699976456899985678789654126\n0989901989789989998991399439777899898543435789931399987934999876898765633987895367899876799896543235\n9877899995678978989532578998656998797632124567893989998923498989999874012346789246987989898987655345\n8766798989789469878943789879546899654321012978999878999212997796799982178968992134976591997899796656\n9954547878992399967899899865434678998732129899998769899929876565689875357899843239899432395698989768\n7653235669991987856798999876215789987654239789987657789899765373499876567898765498798954986987878979\n8762124456789996543467894989104589998768998678986545678789876212345987688959876569657995999876567999\n9989012347899865432356993298913478999879876548995434345678968101356799799545987898745789865985456789\n6598924456895996421245689987897567892989998756789621257989543212456893987634598999658999654986687899\n7987899568934987840234567896789978921399899987898530968999964566567892396723679998767898953199789989\n9876798979924987656495888934567899210198789898987649899999898788689910975435678979878997899019899975\n7675356899899898767686789123679954391297698769999789799898789898799921296586789567989876798923989764\n6543245698798789879899899019789995989987569543935998689765679909899892397697994345698765867894578953\n8432136987657678999910998998998789778943468999899019789954234912998789998998943234989544556895678942\n7543239876543457989422997867997643567892979679678929899892123893989689789989432109875432347989989431\n8664345975442345678999876656789432456789895434569439998789234679876597678976543499964321235679894320\n8798459864321256899987655346896563567898789212497598687679345798765326567897654989984310199998789491\n9897568995438767898998643238987678689987679101789987543568996987654215458998775979996532987877578989\n9987679986549878987976543129998989799986568932679876542356789099873101299439989868987543976966457577\n8998790197678989756797643256899999899865457894569867421867992198764323489321098756597654965452323456\n7679891998789691234598765345678923989954366789697654320378943579885654678999987643469869876321012345\n4567939879896542456999975457789019878942134898789865621247894567986965699678996532398979876432123456\n3459329765998653567895986568993139765899012979899876732456789678987876896599989421297989998673234568\n5678909984329764678993497679954397654678923567943987654567997999799987897987678932986794569984545778\n8799998965679889889989598989795986543567994578992399876799236789654398999896568943975523679995656789\n9989767899789997993978999895689997562456789989989976987890145899876789998768456999854302368987789894\n9879356789899876432767898764789775431634578899879765698991236799987896999654397789763213459998993912\n8656244678998765321545987653459654320123456789767954019789445678998945898743235678954424668999542103\n7542133569899878510126976432398797431835668892456892124689556889329236789655656789765634569987543765\n6531012456789996431239954321239986545646799986587893776789678993210127898767787899879745678998955897\n6542123568899987544398765510123497656656789987678954567898799654431338999978898910989656789209876789"
Prelude> arr
["2199943210","3987894921","9856789892","8767896789","9899965678"]
Prelude> arr = lines f
Prelude> ar = map (map (read . singleton)) arr :: [[Int]]
Prelude> ns = zipWith (\y row -> zipWith (\x n -> (n, (y == 0 || n < (ar !! (y-1) !! x)) && (y == (length ar - 1) || (n < ar !! (y+1) !! x)) && (x == 0 || n < (ar !! y !! (x-1))) && (x == (length (head ar) - 1) || n < (ar !! y !! (x+1))))) [0..] row) [0..] ar
Prelude> sum . map ((+1) . fst) . filter snd $ concat ns
522
Prelude> ns = zipWith (\y row -> zipWith (\x n -> (x, y, n, (y == 0 || n < (ar !! (y-1) !! x)) && (y == (length ar - 1) || (n < ar !! (y+1) !! x)) && (x 
== 0 || n < (ar !! y !! (x-1))) && (x == (length (head ar) - 1) || n < (ar !! y !! (x+1))))) [0..] row) [0..] ar
Prelude> ns
[[(0,0,8,False),(1,0,9,False),(2,0,6,False),(3,0,9,False),(4,0,7,False),(5,0,9,False),(6,0,9,False),(7,0,9,False),(8,0,8,False),(9,0,7,False),(10,0,6,False),(11,0,4,False),(12,0,6,False),(13,0,7,False),(14,0,9,False),(15,0,8,False),(16,0,9,False),(17,0,6,False),(18,0,5,False),(19,0,4,False),(20,0,3,False),(21,0,2,False),(22,0,9,False),(23,0,7,False),(24,0,5,False),(25,0,4,False),(26,0,3,False),(27,0,5,False),(28,0,3,False),(29,0,3,False),(30,0,4,False),(31,0,5,False),(32,0,6,False),(33,0,7,False),(34,0,9,False),(35,0,8,False),(36,0,7,False),(37,0,9,False),(38,0,7,False),(39,0,6,False),(40,0,9,False),(41,0,9,False),(42,0,9,False),(43,0,8,False),(44,0,6,True),(45,0,7,False),(46,0,9,False),(47,0,7,False),(48,0,6,False),(49,0,7,False),(50,0,9,False),(51,0,4,False),(52,0,4,False),(53,0,6,False),(54,0,8,False),(55,0,9,False),(56,0,9,False),(57,0,9,False),(58,0,9,False),(59,0,7,False),(60,0,9,False),(61,0,7,False),(62,0,5,True),(63,0,9,False),(64,0,8,False),(65,0,6,False),(66,0,5,False),(67,0,7,False),(68,0,6,False),(69,0,7,False),(70,0,8,False),(71,0,9,False),(72,0,6,False),(73,0,5,False),(74,0,4,False),(75,0,5,False),(76,0,6,False),(77,0,9,False),(78,0,9,False),(79,0,8,False),(80,0,6,False),(81,0,5,False),(82,0,6,False),(83,0,7,False),(84,0,8,False),(85,0,9,False),(86,0,5,False),(87,0,2,False),(88,0,1,True),(89,0,2,False),(90,0,3,False),(91,0,8,False),(92,0,9,False),(93,0,9,False),(94,0,3,False),(95,0,2,False),(96,0,5,False),(97,0,4,False),(98,0,5,False),(99,0,6,False)],[(0,1,7,False),(1,1,6,False),(2,1,5,False),(3,1,8,False),(4,1,6,False),(5,1,7,False),(6,1,8,False),(7,1,9,False),(8,1,9,False),(9,1,8,False),(10,1,4,False),(11,1,3,False),(12,1,4,False),(13,1,5,False),(14,1,9,False),(15,1,7,False),(16,1,6,False),(17,1,5,False),(18,1,4,False),(19,1,3,False),(20,1,2,False),(21,1,1,False),(22,1,9,False),(23,1,8,False),(24,1,4,False),(25,1,3,False),(26,1,2,False),(27,1,0,True),(28,1,1,False),(29,1,2,False),(30,1,3,False),(31,1,4,False),(32,1,5,False),(33,1,8,False),(34,1,9,False),(35,1,7,False),(36,1,6,False),(37,1,7,False),(38,1,6,False),(39,1,5,False),(40,1,7,False),(41,1,8,False),(42,1,9,False),(43,1,9,False),(44,1,9,False),(45,1,8,False),(46,1,9,False),(47,1,6,False),(48,1,5,False),(49,1,4,False),(50,1,3,False),(51,1,2,False),(52,1,3,False),(53,1,6,False),(54,1,7,False),(55,1,9,False),(56,1,9,False),(57,1,8,False),(58,1,9,False),(59,1,6,False),(60,1,8,False),(61,1,9,False),(62,1,9,False),(63,1,8,False),(64,1,7,False),(65,1,5,False),(66,1,4,False),(67,1,5,False),(68,1,5,False),(69,1,6,False),(70,1,7,False),(71,1,8,False),(72,1,9,False),(73,1,4,False),(74,1,3,True),(75,1,4,False),(76,1,9,False),(77,1,8,False),(78,1,7,False),(79,1,6,False),(80,1,5,False),(81,1,4,False),(82,1,4,False),(83,1,8,False),(84,1,9,False),(85,1,5,False),(86,1,4,False),(87,1,3,False),(88,1,5,False),(89,1,3,False),(90,1,5,False),(91,1,6,False),(92,1,9,False),(93,1,8,False),(94,1,9,False),(95,1,1,True),(96,1,2,False),(97,1,3,False),(98,1,4,False),(99,1,9,False)],[(0,2,6,False),(1,2,2,False),(2,2,4,False),(3,2,3,False),(4,2,4,False),(5,2,5,False),(6,2,7,False),(7,2,8,False),(8,2,9,False),(9,2,9,False),(10,2,3,False),(11,2,2,False),(12,2,5,False),(13,2,6,False),(14,2,7,False),(15,2,9,False),(16,2,9,False),(17,2,9,False),(18,2,7,False),(19,2,6,False),(20,2,2,False),(21,2,0,True),(22,2,1,False),(23,2,9,False),(24,2,5,False),(25,2,4,False),(26,2,3,False),(27,2,1,False),(28,2,9,False),(29,2,3,False),(30,2,4,False),(31,2,5,False),(32,2,6,False),(33,2,9,False),(34,2,7,False),(35,2,6,False),(36,2,5,False),(37,2,6,False),(38,2,5,False),(39,2,4,False),(40,2,6,False),(41,2,6,False),(42,2,7,False),(43,2,9,False),(44,2,9,False),(45,2,9,False),(46,2,9,False),(47,2,9,False),(48,2,3,False),(49,2,1,False),(50,2,0,True),(51,2,1,False),(52,2,2,False),(53,2,4,False),(54,2,6,False),(55,2,7,False),(56,2,9,False),(57,2,6,False),(58,2,8,False),(59,2,5,False),(60,2,6,False),(61,2,9,False),(62,2,9,False),(63,2,7,False),(64,2,6,False),(65,2,4,False),(66,2,3,False),(67,2,2,False),(68,2,4,False),(69,2,5,False),(70,2,6,False),(71,2,7,False),(72,2,9,False),(73,2,7,False),(74,2,5,False),(75,2,9,False),(76,2,8,False),(77,2,6,False),(78,2,5,False),(79,2,4,False),(80,2,4,False),(81,2,3,False),(82,2,3,False),(83,2,5,False),(84,2,6,False),(85,2,9,False),(86,2,5,False),(87,2,4,False),(88,2,6,False),(89,2,5,False),(90,2,6,False),(91,2,9,False),(92,2,8,False),(93,2,7,False),(94,2,8,False),(95,2,9,False),(96,2,4,False),(97,2,4,False),(98,2,9,False),(99,2,8,False)],[(0,3,4,False),(1,3,1,False),(2,3,0,True),(3,3,2,False),(4,3,3,False),(5,3,4,False),(6,3,5,False),(7,3,6,False),(8,3,7,False),(9,3,8,False),(10,3,9,False),(11,3,1,False),(12,3,2,False),(13,3,9,False),(14,3,9,False),(15,3,8,False),(16,3,7,False),(17,3,8,False),(18,3,9,False),(19,3,5,False),(20,3,3,False),(21,3,1,False),(22,3,2,False),(23,3,9,False),(24,3,7,False),(25,3,6,False),(26,3,5,False),(27,3,9,False),(28,3,8,False),(29,3,9,False),(30,3,5,False),(31,3,9,False),(32,3,7,False),(33,3,8,False),(34,3,9,False),(35,3,5,False),(36,3,4,False),(37,3,2,False),(38,3,1,False),(39,3,3,False),(40,3,4,False),(41,3,5,False),(42,3,6,False),(43,3,8,False),(44,3,9,False),(45,3,9,False),(46,3,8,False),(47,3,7,False),(48,3,4,False),(49,3,5,False),(50,3,1,False),(51,3,2,False),(52,3,6,False),(53,3,5,False),(54,3,9,False),(55,3,9,False),(56,3,6,False),(57,3,5,False),(58,3,2,False),(59,3,3,False),(60,3,9,False),(61,3,8,False),(62,3,7,False),(63,3,6,False),(64,3,4,False),(65,3,3,False),(66,3,2,False),(67,3,1,False),(68,3,3,False),(69,3,4,False),(70,3,5,False),(71,3,7,False),(72,3,8,False),(73,3,9,False),(74,3,9,False),(75,3,8,False),(76,3,7,False),(77,3,5,False),(78,3,4,False),(79,3,3,False),(80,3,2,False),(81,3,1,True),(82,3,2,False),(83,3,6,False),(84,3,7,False),(85,3,8,False),(86,3,9,False),(87,3,9,False),(88,3,8,False),(89,3,7,False),(90,3,7,False),(91,3,9,False),(92,3,7,False),(93,3,6,False),(94,3,7,False),(95,3,8,False),(96,3,9,False),(97,3,9,False),(98,3,8,False),(99,3,7,False)],[(0,4,3,False),(1,4,2,False),(2,4,1,False),(3,4,2,False),(4,4,4,False),(5,4,6,False),(6,4,6,False),(7,4,9,False),(8,4,8,False),(9,4,9,False),(10,4,1,False),(11,4,0,True),(12,4,9,False),(13,4,8,False),(14,4,8,False),(15,4,7,False),(16,4,6,False),(17,4,7,False),(18,4,8,False),(19,4,9,False),(20,4,4,False),(21,4,2,False),(22,4,9,False),(23,4,8,False),(24,4,9,False),(25,4,7,False),(26,4,9,False),(27,4,7,False),(28,4,6,False),(29,4,5,False),(30,4,9,False),(31,4,7,False),(32,4,9,False),(33,4,9,False),(34,4,5,False),(35,4,4,False),(36,4,2,False),(37,4,1,False),(38,4,0,True),(39,4,2,False),(40,4,3,False),(41,4,4,False),(42,4,5,False),(43,4,7,False),(44,4,9,False),(45,4,8,False),(46,4,7,False),(47,4,6,False),(48,4,5,False),(49,4,4,False),(50,4,2,False),(51,4,3,False),(52,4,8,False),(53,4,6,False),(54,4,7,False),(55,4,8,False),(56,4,9,False),(57,4,4,False),(58,4,1,False),(59,4,0,True),(60,4,3,False),(61,4,9,False),(62,4,8,False),(63,4,7,False),(64,4,5,False),(65,4,4,False),(66,4,3,False),(67,4,0,True),(68,4,2,False),(69,4,6,False),(70,4,7,False),(71,4,9,False),(72,4,9,False),(73,4,9,False),(74,4,8,False),(75,4,9,False),(76,4,8,False),(77,4,6,False),(78,4,6,False),(79,4,5,False),(80,4,3,False),(81,4,2,False),(82,4,3,False),(83,4,4,False),(84,4,5,False),(85,4,6,False),(86,4,7,False),(87,4,8,False),(88,4,9,False),(89,4,9,False),(90,4,9,False),(91,4,7,False),(92,4,6,False),(93,4,5,False),(94,4,4,False),(95,4,6,False),(96,4,9,False),(97,4,8,False),(98,4,9,False),(99,4,6,False)],[(0,5,4,False),(1,5,3,False),(2,5,2,False),(3,5,3,False),(4,5,4,False),(5,5,8,False),(6,5,7,False),(7,5,8,False),(8,5,9,False),(9,5,3,False),(10,5,2,False),(11,5,9,False),(12,5,9,False),(13,5,7,False),(14,5,9,False),(15,5,5,False),(16,5,4,False),(17,5,8,False),(18,5,9,False),(19,5,8,False),(20,5,9,False),(21,5,9,False),(22,5,9,False),(23,5,7,False),(24,5,8,False),(25,5,9,False),(26,5,8,False),(27,5,7,False),(28,5,9,False),(29,5,4,False),(30,5,7,False),(31,5,6,False),(32,5,8,False),(33,5,9,False),(34,5,6,False),(35,5,5,False),(36,5,4,False),(37,5,2,False),(38,5,4,False),(39,5,3,False),(40,5,4,False),(41,5,9,False),(42,5,6,False),(43,5,7,False),(44,5,8,False),(45,5,9,False),(46,5,8,False),(47,5,7,False),(48,5,6,False),(49,5,8,False),(50,5,6,False),(51,5,4,False),(52,5,9,False),(53,5,8,False),(54,5,8,False),(55,5,9,False),(56,5,4,False),(57,5,3,False),(58,5,2,False),(59,5,1,False),(60,5,2,False),(61,5,4,False),(62,5,9,False),(63,5,8,False),(64,5,6,False),(65,5,5,False),(66,5,4,False),(67,5,1,False),(68,5,3,False),(69,5,5,False),(70,5,9,False),(71,5,9,False),(72,5,9,False),(73,5,9,False),(74,5,6,False),(75,5,7,False),(76,5,9,False),(77,5,8,False),(78,5,7,False),(79,5,7,False),(80,5,6,False),(81,5,5,False),(82,5,4,False),(83,5,6,False),(84,5,6,False),(85,5,7,False),(86,5,8,False),(87,5,9,False),(88,5,9,False),(89,5,8,False),(90,5,7,False),(91,5,6,False),(92,5,5,False),(93,5,4,False),(94,5,3,False),(95,5,9,False),(96,5,8,False),(97,5,7,False),(98,5,5,False),(99,5,4,True)],[(0,6,5,False),(1,6,6,False),(2,6,9,False),(3,6,4,False),(4,6,6,False),(5,6,9,False),(6,6,8,False),(7,6,9,False),(8,6,9,False),(9,6,9,False),(10,6,9,False),(11,6,8,False),(12,6,7,False),(13,6,6,False),(14,6,5,False),(15,6,4,False),(16,6,3,True),(17,6,9,False),(18,6,8,False),(19,6,7,False),(20,6,8,False),(21,6,8,False),(22,6,9,False),(23,6,6,False),(24,6,7,False),(25,6,8,False),(26,6,9,False),(27,6,5,False),(28,6,4,False),(29,6,3,True),(30,6,4,False),(31,6,5,False),(32,6,8,False),(33,6,9,False),(34,6,8,False),(35,6,7,False),(36,6,9,False),(37,6,3,False),(38,6,5,False),(39,6,9,False),(40,6,9,False),(41,6,8,False),(42,6,9,False),(43,6,9,False),(44,6,9,False),(45,6,9,False),(46,6,9,False),(47,6,8,False),(48,6,7,False),(49,6,8,False),(50,6,7,False),(51,6,9,False),(52,6,9,False),(53,6,9,False),(54,6,9,False),(55,6,9,False),(56,6,9,False),(57,6,4,False),(58,6,4,False),(59,6,6,False),(60,6,7,False),(61,6,5,False),(62,6,9,False),(63,6,8,False),(64,6,7,False),(65,6,9,False),(66,6,5,False),(67,6,2,False),(68,6,7,False),(69,6,6,False),(70,6,7,False),(71,6,8,False),(72,6,9,False),(73,6,7,False),(74,6,5,False),(75,6,6,False),(76,6,7,False),(77,6,9,False),(78,6,8,False),(79,6,8,False),(80,6,7,False),(81,6,6,False),(82,6,5,False),(83,6,6,False),(84,6,7,False),(85,6,8,False),(86,6,9,False),(87,6,5,False),(88,6,6,False),(89,6,9,False),(90,6,9,False),(91,6,8,False),(92,6,7,False),(93,6,3,False),(94,6,2,False),(95,6,1,False),(96,6,9,False),(97,6,8,False),(98,6,6,False),(99,6,5,False)],[(0,7,6,False),(1,7,7,False),(2,7,8,False),(3,7,8,False),(4,7,7,False),(5,7,9,False),(6,7,9,False),(7,7,9,False),(8,7,9,False),(9,7,8,False),(10,7,9,False),(11,7,9,False),(12,7,8,False),(13,7,9,False),(14,7,7,False),(15,7,5,False),(16,7,9,False),(17,7,7,False),(18,7,6,False),(19,7,5,False),(20,7,6,False),(21,7,7,False),(22,7,4,False),(23,7,5,False),(24,7,6,False),(25,7,8,False),(26,7,9,False),(27,7,9,False),(28,7,5,False),(29,7,9,False),(30,7,8,False),(31,7,6,False),(32,7,7,False),(33,7,8,False),(34,7,9,False),(35,7,8,False),(36,7,5,False),(37,7,4,False),(38,7,9,False),(39,7,8,False),(40,7,8,False),(41,7,7,False),(42,7,9,False),(43,7,8,False),(44,7,9,False),(45,7,8,False),(46,7,7,False),(47,7,9,False),(48,7,8,False),(49,7,9,False),(50,7,8,False),(51,7,9,False),(52,7,8,False),(53,7,6,False),(54,7,5,False),(55,7,8,False),(56,7,7,False),(57,7,9,False),(58,7,9,False),(59,7,7,False),(60,7,8,False),(61,7,9,False),(62,7,3,True),(63,7,9,False),(64,7,8,False),(65,7,7,False),(66,7,6,False),(67,7,9,False),(68,7,8,False),(69,7,7,False),(70,7,9,False),(71,7,9,False),(72,7,3,False),(73,7,1,False),(74,7,4,False),(75,7,5,False),(76,7,8,False),(77,7,9,False),(78,7,9,False),(79,7,9,False),(80,7,8,False),(81,7,7,False),(82,7,8,False),(83,7,7,False),(84,7,9,False),(85,7,9,False),(86,7,5,False),(87,7,4,False),(88,7,5,False),(89,7,9,False),(90,7,8,False),(91,7,7,False),(92,7,6,False),(93,7,5,False),(94,7,1,False),(95,7,0,True),(96,7,2,False),(97,7,9,False),(98,7,8,False),(99,7,7,False)],[(0,8,7,False),(1,8,8,False),(2,8,9,False),(3,8,9,False),(4,8,8,False),(5,8,9,False),(6,8,9,False),(7,8,8,False),(8,8,9,False),(9,8,7,False),(10,8,9,False),(11,8,8,False),(12,8,9,False),(13,8,9,False),(14,8,8,False),(15,8,9,False),(16,8,8,False),(17,8,7,False),(18,8,5,False),(19,8,4,False),(20,8,3,False),(21,8,2,False),(22,8,3,False),(23,8,4,False),(24,8,5,False),(25,8,6,False),(26,8,7,False),(27,8,8,False),(28,8,9,False),(29,8,9,False),(30,8,8,False),(31,8,7,False),(32,8,8,False),(33,8,9,False),(34,8,8,False),(35,8,9,False),(36,8,7,False),(37,8,9,False),(38,8,8,False),(39,8,7,False),(40,8,9,False),(41,8,6,False),(42,8,8,False),(43,8,7,False),(44,8,9,False),(45,8,9,False),(46,8,6,False),(47,8,5,False),(48,8,9,False),(49,8,1,True),(50,8,9,False),(51,8,7,False),(52,8,6,False),(53,8,5,False),(54,8,4,False),(55,8,7,False),(56,8,5,False),(57,8,6,False),(58,8,8,False),(59,8,9,False),(60,8,9,False),(61,8,8,False),(62,8,5,False),(63,8,7,False),(64,8,9,False),(65,8,8,False),(66,8,9,False),(67,8,8,False),(68,8,9,False),(69,8,9,False),(70,8,9,False),(71,8,2,False),(72,8,1,False),(73,8,0,True),(74,8,3,False),(75,8,4,False),(76,8,9,False),(77,8,9,False),(78,8,9,False),(79,8,8,False),(80,8,9,False),(81,8,8,False),(82,8,9,False),(83,8,8,False),(84,8,9,False),(85,8,4,False),(86,8,3,False),(87,8,3,False),(88,8,4,False),(89,8,5,False),(90,8,9,False),(91,8,8,False),(92,8,5,False),(93,8,4,False),(94,8,2,False),(95,8,1,False),(96,8,3,False),(97,8,6,False),(98,8,9,False),(99,8,8,False)],[(0,9,8,False),(1,9,9,False),(2,9,1,False),(3,9,3,False),(4,9,9,False),(5,9,9,False),(6,9,8,False),(7,9,7,False),(8,9,6,False),(9,9,6,False),(10,9,7,False),(11,9,7,False),(12,9,9,False),(13,9,9,False),(14,9,9,False),(15,9,9,False),(16,9,9,False),(17,9,6,False),(18,9,4,False),(19,9,3,False),(20,9,2,False),(21,9,1,True),(22,9,2,False),(23,9,3,False),(24,9,4,False),(25,9,5,False),(26,9,6,False),(27,9,9,False),(28,9,9,False),(29,9,9,False),(30,9,9,False),(31,9,8,False),(32,9,9,False),(33,9,7,False),(34,9,7,False),(35,9,8,False),(36,9,9,False),(37,9,8,False),(38,9,7,False),(39,9,6,False),(40,9,7,False),(41,9,5,False),(42,9,4,False),(43,9,6,False),(44,9,7,False),(45,9,8,False),(46,9,9,False),(47,9,4,False),(48,9,3,False),(49,9,2,False),(50,9,9,False),(51,9,6,False),(52,9,5,False),(53,9,4,False),(54,9,3,False),(55,9,4,False),(56,9,3,False),(57,9,4,False),(58,9,9,False),(59,9,9,False),(60,9,8,False),(61,9,7,False),(62,9,6,False),(63,9,9,False),(64,9,9,False),(65,9,9,False),(66,9,7,False),(67,9,7,False),(68,9,9,False),(69,9,7,False),(70,9,8,False),(71,9,9,False),(72,9,2,False),(73,9,1,False),(74,9,2,False),(75,9,9,False),(76,9,8,False),(77,9,9,False),(78,9,8,False),(79,9,7,False),(80,9,8,False),(81,9,9,False),(82,9,9,False),(83,9,9,False),(84,9,5,False),(85,9,3,False),(86,9,2,False),(87,9,1,False),(88,9,2,False),(89,9,9,False),(90,9,8,False),(91,9,7,False),(92,9,6,False),(93,9,5,False),(94,9,4,False),(95,9,3,False),(96,9,4,False),(97,9,5,False),(98,9,6,False),(99,9,9,False)],[(0,10,9,False),(1,10,1,False),(2,10,0,True),(3,10,1,False),(4,10,9,False),(5,10,8,False),(6,10,7,False),(7,10,6,False),(8,10,5,False),(9,10,5,False),(10,10,7,False),(11,10,6,False),(12,10,7,False),(13,10,9,False),(14,10,8,False),(15,10,9,False),(16,10,8,False),(17,10,7,False),(18,10,5,False),(19,10,7,False),(20,10,3,False),(21,10,2,False),(22,10,3,False),(23,10,4,False),(24,10,5,False),(25,10,6,False),(26,10,7,False),(27,10,9,False),(28,10,9,False),(29,10,8,False),(30,10,7,False),(31,10,9,False),(32,10,4,False),(33,10,6,False),(34,10,6,False),(35,10,8,False),(36,10,9,False),(37,10,6,False),(38,10,5,False),(39,10,4,False),(40,10,3,False),(41,10,4,False),(42,10,3,False),(43,10,4,False),(44,10,6,False),(45,10,9,False),(46,10,7,False),(47,10,6,False),(48,10,4,False),(49,10,9,False),(50,10,8,False),(51,10,7,False),(52,10,5,False),(53,10,4,False),(54,10,2,False),(55,10,1,False),(56,10,2,False),(57,10,7,False),(58,10,8,False),(59,10,9,False),(60,10,9,False),(61,10,8,False),(62,10,9,False),(63,10,8,False),(64,10,7,False),(65,10,6,False),(66,10,5,False),(67,10,6,False),(68,10,5,False),(69,10,6,False),(70,10,7,False),(71,10,8,False),(72,10,9,False),(73,10,2,False),(74,10,9,False),(75,10,8,False),(76,10,7,False),(77,10,9,False),(78,10,7,False),(79,10,6,False),(80,10,7,False),(81,10,8,False),(82,10,9,False),(83,10,7,False),(84,10,6,False),(85,10,5,False),(86,10,1,False),(87,10,0,True),(88,10,1,False),(89,10,5,False),(90,10,9,False),(91,10,9,False),(92,10,7,False),(93,10,7,False),(94,10,6,False),(95,10,7,False),(96,10,5,False),(97,10,6,False),(98,10,7,False),(99,10,8,False)],[(0,11,3,False),(1,11,2,False),(2,11,1,False),(3,11,2,False),(4,11,3,False),(5,11,9,False),(6,11,6,False),(7,11,5,False),(8,11,4,False),(9,11,3,False),(10,11,2,False),(11,11,5,False),(12,11,6,False),(13,11,8,False),(14,11,7,False),(15,11,8,False),(16,11,9,False),(17,11,8,False),(18,11,6,False),(19,11,8,False),(20,11,9,False),(21,11,3,False),(22,11,4,False),(23,11,7,False),(24,11,8,False),(25,11,9,False),(26,11,9,False),(27,11,9,False),(28,11,8,False),(29,11,7,False),(30,11,6,False),(31,11,4,False),(32,11,3,False),(33,11,4,False),(34,11,5,False),(35,11,9,False),(36,11,6,False),(37,11,5,False),(38,11,4,False),(39,11,3,False),(40,11,2,False),(41,11,1,False),(42,11,2,False),(43,11,3,False),(44,11,7,False),(45,11,8,False),(46,11,9,False),(47,11,6,False),(48,11,5,False),(49,11,6,False),(50,11,9,False),(51,11,8,False),(52,11,3,False),(53,11,2,False),(54,11,1,False),(55,11,0,True),(56,11,1,False),(57,11,6,False),(58,11,7,False),(59,11,8,False),(60,11,9,False),(61,11,9,False),(62,11,9,False),(63,11,9,False),(64,11,8,False),(65,11,5,False),(66,11,4,False),(67,11,2,False),(68,11,4,False),(69,11,5,False),(70,11,9,False),(71,11,9,False),(72,11,1,True),(73,11,9,False),(74,11,8,False),(75,11,7,False),(76,11,6,False),(77,11,6,False),(78,11,4,False),(79,11,5,False),(80,11,9,False),(81,11,9,False),(82,11,9,False),(83,11,8,False),(84,11,7,False),(85,11,6,False),(86,11,2,False),(87,11,1,False),(88,11,2,False),(89,11,4,False),(90,11,5,False),(91,11,6,False),(92,11,9,False),(93,11,8,False),(94,11,7,False),(95,11,8,False),(96,11,9,False),(97,11,7,False),(98,11,8,False),(99,11,9,False)],[(0,12,5,False),(1,12,4,False),(2,12,3,False),(3,12,3,False),(4,12,4,False),(5,12,9,False),(6,12,5,False),(7,12,4,False),(8,12,3,False),(9,12,2,False),(10,12,1,False),(11,12,4,False),(12,12,5,False),(13,12,7,False),(14,12,6,False),(15,12,7,False),(16,12,8,False),(17,12,9,False),(18,12,7,False),(19,12,9,False),(20,12,5,False),(21,12,4,False),(22,12,5,False),(23,12,6,False),(24,12,7,False),(25,12,8,False),(26,12,9,False),(27,12,6,False),(28,12,9,False),(29,12,8,False),(30,12,5,False),(31,12,4,False),(32,12,2,True),(33,12,3,False),(34,12,6,False),(35,12,8,False),(36,12,9,False),(37,12,9,False),(38,12,5,False),(39,12,4,False),(40,12,3,False),(41,12,0,True),(42,12,1,False),(43,12,2,False),(44,12,9,False),(45,12,9,False),(46,12,9,False),(47,12,8,False),(48,12,6,False),(49,12,9,False),(50,12,8,False),(51,12,6,False),(52,12,4,False),(53,12,3,False),(54,12,2,False),(55,12,1,False),(56,12,2,False),(57,12,5,False),(58,12,8,False),(59,12,9,False),(60,12,9,False),(61,12,9,False),(62,12,9,False),(63,12,8,False),(64,12,7,False),(65,12,6,False),(66,12,2,False),(67,12,1,True),(68,12,2,False),(69,12,7,False),(70,12,8,False),(71,12,9,False),(72,12,2,False),(73,12,9,False),(74,12,7,False),(75,12,6,False),(76,12,5,False),(77,12,5,False),(78,12,3,False),(79,12,4,False),(80,12,6,False),(81,12,9,False),(82,12,9,False),(83,12,9,False),(84,12,8,False),(85,12,7,False),(86,12,5,False),(87,12,3,False),(88,12,4,False),(89,12,5,False),(90,12,7,False),(91,12,7,False),(92,12,8,False),(93,12,9,False),(94,12,8,False),(95,12,9,False),(96,12,9,False),(97,12,8,False),(98,12,9,False),(99,12,2,True)],[(0,13,6,False),(1,13,5,False),(2,13,6,False),(3,13,7,False),(4,13,9,False),(5,13,8,False),(6,13,9,False),(7,13,5,False),(8,13,4,False),(9,13,3,False),(10,13,0,True),(11,13,2,False),(12,13,3,False),(13,13,4,False),(14,13,5,False),(15,13,6,False),(16,13,7,False),(17,13,9,False),(18,13,8,False),(19,13,9,False),(20,13,6,False),(21,13,6,False),(22,13,8,False),(23,13,7,False),(24,13,8,False),(25,13,9,False),(26,13,9,False),(27,13,4,True),(28,13,5,False),(29,13,9,False),(30,13,7,False),(31,13,4,False),(32,13,3,False),(33,13,4,False),(34,13,5,False),(35,13,6,False),(36,13,7,False),(37,13,8,False),(38,13,9,False),(39,13,6,False),(40,13,2,False),(41,13,1,False),(42,13,2,False),(43,13,9,False),(44,13,8,False),(45,13,9,False),(46,13,8,False),(47,13,9,False),(48,13,7,False),(49,13,9,False),(50,13,9,False),(51,13,8,False),(52,13,7,False),(53,13,6,False),(54,13,4,False),(55,13,2,False),(56,13,3,False),(57,13,4,False),(58,13,6,False),(59,13,7,False),(60,13,8,False),(61,13,9,False),(62,13,8,False),(63,13,7,False),(64,13,6,False),(65,13,5,False),(66,13,4,False),(67,13,6,False),(68,13,7,False),(69,13,9,False),(70,13,9,False),(71,13,9,False),(72,13,9,False),(73,13,8,False),(74,13,9,False),(75,13,7,False),(76,13,4,False),(77,13,3,False),(78,13,2,True),(79,13,3,False),(80,13,4,False),(81,13,8,False),(82,13,9,False),(83,13,9,False),(84,13,9,False),(85,13,8,False),(86,13,6,False),(87,13,4,False),(88,13,5,False),(89,13,6,False),(90,13,7,False),(91,13,9,False),(92,13,9,False),(93,13,7,False),(94,13,9,False),(95,13,9,False),(96,13,9,False),(97,13,9,False),(98,13,5,False),(99,13,3,False)],[(0,14,7,False),(1,14,6,False),(2,14,9,False),(3,14,9,False),(4,14,9,False),(5,14,7,False),(6,14,8,False),(7,14,9,False),(8,14,3,False),(9,14,2,False),(10,14,1,False),(11,14,2,False),(12,14,4,False),(13,14,5,False),(14,14,6,False),(15,14,9,False),(16,14,8,False),(17,14,9,False),(18,14,9,False),(19,14,9,False),(20,14,8,False),(21,14,7,False),(22,14,9,False),(23,14,8,False),(24,14,9,False),(25,14,7,False),(26,14,8,False),(27,14,9,False),(28,14,9,False),(29,14,8,False),(30,14,6,False),(31,14,5,False),(32,14,4,False),(33,14,5,False),(34,14,6,False),(35,14,7,False),(36,14,8,False),(37,14,9,False),(38,14,9,False),(39,14,7,False),(40,14,3,False),(41,14,2,False),(42,14,9,False),(43,14,8,False),(44,14,7,False),(45,14,8,False),(46,14,7,False),(47,14,9,False),(48,14,8,False),(49,14,9,False),(50,14,6,False),(51,14,9,False),(52,14,9,False),(53,14,7,False),(54,14,6,False),(55,14,6,False),(56,14,5,False),(57,14,6,False),(58,14,7,False),(59,14,8,False),(60,14,9,False),(61,14,9,False),(62,14,9,False),(63,14,8,False),(64,14,7,False),(65,14,8,False),(66,14,5,False),(67,14,7,False),(68,14,9,False),(69,14,3,True),(70,14,5,False),(71,14,9,False),(72,14,9,False),(73,14,7,False),(74,14,8,False),(75,14,9,False),(76,14,6,False),(77,14,4,False),(78,14,5,False),(79,14,6,False),(80,14,6,False),(81,14,7,False),(82,14,8,False),(83,14,9,False),(84,14,8,False),(85,14,9,False),(86,14,6,False),(87,14,5,False),(88,14,9,False),(89,14,8,False),(90,14,9,False),(91,14,4,False),(92,14,5,False),(93,14,6,False),(94,14,7,False),(95,14,8,False),(96,14,9,False),(97,14,8,False),(98,14,6,False),(99,14,7,False)],[(0,15,8,False),(1,15,9,False),(2,15,8,False),(3,15,8,False),(4,15,7,False),(5,15,6,False),(6,15,7,False),(7,15,9,False),(8,15,9,False),(9,15,3,False),(10,15,2,False),(11,15,3,False),(12,15,7,False),(13,15,6,False),(14,15,7,False),(15,15,8,False),(16,15,9,False),(17,15,9,False),(18,15,8,False),(19,15,9,False),(20,15,9,False),(21,15,8,False),(22,15,9,False),(23,15,9,False),(24,15,5,False),(25,15,6,False),(26,15,7,False),(27,15,8,False),(28,15,9,False),(29,15,9,False),(30,15,8,False),(31,15,6,False),(32,15,9,False),(33,15,8,False),(34,15,7,False),(35,15,8,False),(36,15,9,False),(37,15,8,False),(38,15,6,False),(39,15,5,False),(40,15,4,False),(41,15,9,False),(42,15,8,False),(43,15,7,False),(44,15,6,False),(45,15,5,False),(46,15,6,False),(47,15,8,False),(48,15,9,False),(49,15,6,False),(50,15,5,False),(51,15,4,False),(52,15,3,False),(53,15,9,False),(54,15,9,False),(55,15,7,False),(56,15,8,False),(57,15,7,False),(58,15,8,False),(59,15,9,False),(60,15,8,False),(61,15,9,False),(62,15,9,False),(63,15,9,False),(64,15,8,False),(65,15,8,False),(66,15,7,False),(67,15,9,False),(68,15,7,False),(69,15,5,False),(70,15,9,False),(71,15,8,False),(72,15,7,False),(73,15,6,False),(74,15,8,False),(75,15,9,False),(76,15,9,False),(77,15,5,False),(78,15,6,False),(79,15,7,False),(80,15,8,False),(81,15,8,False),(82,15,9,False),(83,15,7,False),(84,15,7,False),(85,15,8,False),(86,15,9,False),(87,15,9,False),(88,15,9,False),(89,15,9,False),(90,15,2,True),(91,15,3,False),(92,15,9,False),(93,15,8,False),(94,15,9,False),(95,15,9,False),(96,15,9,False),(97,15,8,False),(98,15,7,False),(99,15,9,False)],[(0,16,9,False),(1,16,9,False),(2,16,7,False),(3,16,6,False),(4,16,4,False),(5,16,5,False),(6,16,8,False),(7,16,7,False),(8,16,8,False),(9,16,9,False),(10,16,3,False),(11,16,9,False),(12,16,8,False),(13,16,8,False),(14,16,9,False),(15,16,9,False),(16,16,6,False),(17,16,8,False),(18,16,7,False),(19,16,8,False),(20,16,9,False),(21,16,9,False),(22,16,2,True),(23,16,3,False),(24,16,4,False),(25,16,5,False),(26,16,6,False),(27,16,7,False),(28,16,9,False),(29,16,9,False),(30,16,9,False),(31,16,8,False),(32,16,9,False),(33,16,9,False),(34,16,8,False),(35,16,9,False),(36,16,9,False),(37,16,9,False),(38,16,7,False),(39,16,8,False),(40,16,9,False),(41,16,8,False),(42,16,7,False),(43,16,6,False),(44,16,5,False),(45,16,4,False),(46,16,5,False),(47,16,6,False),(48,16,9,False),(49,16,5,False),(50,16,4,False),(51,16,3,False),(52,16,2,False),(53,16,1,True),(54,16,9,False),(55,16,8,False),(56,16,9,False),(57,16,9,False),(58,16,9,False),(59,16,5,False),(60,16,6,False),(61,16,7,False),(62,16,8,False),(63,16,9,False),(64,16,9,False),(65,16,9,False),(66,16,8,False),(67,16,9,False),(68,16,8,False),(69,16,9,False),(70,16,8,False),(71,16,9,False),(72,16,6,False),(73,16,5,False),(74,16,7,False),(75,16,9,False),(76,16,8,False),(77,16,9,False),(78,16,9,False),(79,16,8,False),(80,16,9,False),(81,16,9,False),(82,16,8,False),(83,16,6,False),(84,16,6,False),(85,16,4,False),(86,16,5,False),(87,16,8,False),(88,16,9,False),(89,16,4,False),(90,16,3,False),(91,16,9,False),(92,16,8,False),(93,16,9,False),(94,16,1,False),(95,16,0,True),(96,16,9,False),(97,16,9,False),(98,16,8,False),(99,16,9,False)],[(0,17,9,False),(1,17,8,False),(2,17,5,False),(3,17,4,False),(4,17,3,True),(5,17,4,False),(6,17,5,False),(7,17,6,False),(8,17,7,False),(9,17,9,False),(10,17,4,False),(11,17,7,False),(12,17,9,False),(13,17,9,False),(14,17,7,False),(15,17,6,False),(16,17,5,False),(17,17,5,False),(18,17,6,False),(19,17,9,False),(20,17,5,False),(21,17,4,False),(22,17,3,False),(23,17,4,False),(24,17,6,False),(25,17,7,False),(26,17,8,False),(27,17,8,False),(28,17,9,False),(29,17,9,False),(30,17,8,False),(31,17,9,False),(32,17,9,False),(33,17,9,False),(34,17,9,False),(35,17,9,False),(36,17,9,False),(37,17,9,False),(38,17,8,False),(39,17,9,False),(40,17,8,False),(41,17,7,False),(42,17,6,False),(43,17,5,False),(44,17,4,False),(45,17,3,False),(46,17,4,False),(47,17,6,False),(48,17,8,False),(49,17,9,False),(50,17,6,False),(51,17,5,False),(52,17,3,False),(53,17,2,False),(54,17,3,False),(55,17,9,False),(56,17,8,False),(57,17,7,False),(58,17,5,False),(59,17,4,False),(60,17,8,False),(61,17,9,False),(62,17,9,False),(63,17,9,False),(64,17,9,False),(65,17,6,False),(66,17,9,False),(67,17,4,False),(68,17,9,False),(69,17,8,False),(70,17,7,False),(71,17,6,False),(72,17,5,False),(73,17,4,False),(74,17,6,False),(75,17,6,False),(76,17,7,False),(77,17,8,False),(78,17,8,False),(79,17,9,False),(80,17,5,True),(81,17,6,False),(82,17,9,False),(83,17,5,FalsInterrupted.
Prelude> map (\(x,y,_,__) -> (x,y)) . filter (\(a,b,c,d) -> d) $ concat ns      
[(44,0),(62,0),(88,0),(27,1),(74,1),(95,1),(21,2),(50,2),(2,3),(81,3),(11,4),(38,4),(59,4),(67,4),(99,5),(16,6),(29,6),(62,7),(95,7),(49,8),(73,8),(21,9),(2,10),(87,10),(55,11),(72,11),(32,12),(41,12),(67,12),(99,12),(10,13),(27,13),(78,13),(69,14),(90,15),(22,16),(53,16),(95,16),(4,17),(80,17),(59,18),(68,18),(85,18),(27,19),(38,19),(74,19),(31,20),(45,20),(1,21),(17,21),(90,21),(99,21),(70,22),(22,23),(58,23),(66,23),(7,24),(52,24),(29,25),(78,25),(33,26),(45,26),(61,26),(68,26),(75,26),(0,27),(89,28),(66,30),(24,31),(58,31),(98,31),(5,32),(82,32),(15,33),(39,33),(48,33),(74,33),(63,35),(86,35),(91,35),(69,37),(11,38),(31,38),(79,38),(51,40),(60,40),(66,40),(95,40),(99,40),(22,41),(38,41),(15,42),(46,42),(73,42),(2,43),(90,43),(83,44),(28,45),(15,46),(63,46),(80,46),(9,47),(33,47),(55,48),(73,48),(4,49),(96,49),(22,50),(33,50),(41,50),(88,50),(0,51),(12,51),(49,52),(64,52),(4,53),(28,53),(59,53),(72,53),(82,53),(16,55),(46,55),(99,55),(21,56),(36,56),(89,56),(9,58),(55,58),(66,58),(1,59),(42,59),(61,60),(83,60),(94,60),(75,61),(46,62),(26,63),(34,63),(10,64),(17,65),(56,65),(67,65),(81,65),(88,65),(7,66),(39,66),(34,67),(62,67),(83,67),(30,68),(3,69),(26,69),(45,69),(48,69),(97,69),(0,70),(5,70),(21,70),(9,71),(70,71),(40,72),(56,72),(79,72),(87,72),(90,73),(12,74),(29,75),(4,76),(25,76),(44,76),(62,76),(83,76),(94,76),(1,77),(18,78),(51,78),(74,78),(11,79),(36,79),(69,79),(91,79),(25,81),(45,81),(47,81),(52,81),(62,81),(4,82),(21,82),(49,82),(39,83),(58,83),(80,83),(33,84),(99,84),(12,85),(87,85),(44,86),(25,87),(61,87),(68,87),(6,88),(76,88),(15,89),(54,89),(94,89),(31,90),(0,91),(40,91),(73,91),(81,91),(5,92),(11,92),(21,92),(48,93),(67,93),(57,94),(86,94),(36,96),(52,96),(76,96),(98,96),(18,97),(45,97),(4,98),(66,98),(27,99),(81,99),(92,99)]
Prelude> pts = map (\(x,y,_,__) -> (x,y)) . filter (\(a,b,c,d) -> d) $ concat ns
Prelude> until (\(visited, bound) -> all ((== 9) . get ar) bound) loop (55, 11)

<interactive>:57:43: error:
    Variable not in scope: get :: [[Int]] -> a1 -> a0

<interactive>:57:58: error:
    Variable not in scope: loop :: (a, t a1) -> (a, t a1)
Prelude> get a (x, y) = a !! y !! x
Prelude> get a (x, y, _) = a !! y !! x    
Prelude> until (\(visited, bound) -> all ((== 9) . get ar) bound) loop (55, 11, get ar (55, 11, 0))

<interactive>:60:58: error:
    Variable not in scope:
      loop :: (a, t (Int, Int, c)) -> (a, t (Int, Int, c))
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop (55, 11, get ar (55, 11, 0))

<interactive>:61:62: error:
    Variable not in scope:
      loop :: (a, t (a1, b, a2)) -> (a, t (a1, b, a2))
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) loop (55, 11, get ar (55, 11))          

<interactive>:62:85: error:
    parse error (possibly incorrect indentation or mismatched brackets)
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop (55, 11, get ar (55, 11))

<interactive>:63:62: error:
    Variable not in scope:
      loop :: (a, t (a2, b, a3)) -> (a, t (a2, b, a3))
Prelude> loop visited bound = (visited ++ filter (\(_,__,n) -> n /= 9) bound, concatMap (\(x,y,n) -> if n /= 9 then () ++ () ++ () else [(x,y,n)]) bound)
<interactive>:64:108: error:
    * Couldn't match expected type `[(a, b, c)]' with actual type `()'
    * In the first argument of `(++)', namely `()'
      In the expression: () ++ () ++ () ++ ()
      In the expression:
        if n /= 9 then () ++ () ++ () ++ () else [(x, y, n)]
    * Relevant bindings include
        n :: c (bound at <interactive>:64:87)
        y :: b (bound at <interactive>:64:85)
        x :: a (bound at <interactive>:64:83)
        bound :: [(a, b, c)] (bound at <interactive>:64:14)
        visited :: [(a, b, c)] (bound at <interactive>:64:6)
        loop :: [(a, b, c)] -> [(a, b, c)] -> ([(a, b, c)], [(a, b, c)])
          (bound at <interactive>:64:1)

<interactive>:64:114: error:
    * Couldn't match expected type `[(a, b, c)]' with actual type `()'
    * In the first argument of `(++)', namely `()'
      In the second argument of `(++)', namely `() ++ () ++ ()'
      In the expression: () ++ () ++ () ++ ()
    * Relevant bindings include
        n :: c (bound at <interactive>:64:87)
        y :: b (bound at <interactive>:64:85)
        x :: a (bound at <interactive>:64:83)
        bound :: [(a, b, c)] (bound at <interactive>:64:14)
        visited :: [(a, b, c)] (bound at <interactive>:64:6)
        loop :: [(a, b, c)] -> [(a, b, c)] -> ([(a, b, c)], [(a, b, c)])
          (bound at <interactive>:64:1)

<interactive>:64:120: error:
    * Couldn't match expected type `[(a, b, c)]' with actual type `()'
    * In the first argument of `(++)', namely `()'
      In the second argument of `(++)', namely `() ++ ()'
      In the second argument of `(++)', namely `() ++ () ++ ()'
    * Relevant bindings include
        n :: c (bound at <interactive>:64:87)
        y :: b (bound at <interactive>:64:85)
        x :: a (bound at <interactive>:64:83)
        bound :: [(a, b, c)] (bound at <interactive>:64:14)
        visited :: [(a, b, c)] (bound at <interactive>:64:6)
        loop :: [(a, b, c)] -> [(a, b, c)] -> ([(a, b, c)], [(a, b, c)])
          (bound at <interactive>:64:1)

<interactive>:64:126: error:
    * Couldn't match expected type `[(a, b, c)]' with actual type `()'
    * In the second argument of `(++)', namely `()'
      In the second argument of `(++)', namely `() ++ ()'
      In the second argument of `(++)', namely `() ++ () ++ ()'
    * Relevant bindings include
        n :: c (bound at <interactive>:64:87)
        y :: b (bound at <interactive>:64:85)
        x :: a (bound at <interactive>:64:83)
        bound :: [(a, b, c)] (bound at <interactive>:64:14)
        visited :: [(a, b, c)] (bound at <interactive>:64:6)
        loop :: [(a, b, c)] -> [(a, b, c)] -> ([(a, b, c)], [(a, b, c)])
          (bound at <interactive>:64:1)
Prelude> loop visited bound = (visited ++ filter (\(_,__,n) -> n /= 9) bound, concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get (x-1,y))] 
else []) ++ (if x > 0 then [(x-1,y,get (x-1,y))] ) ++ () ++ () else [(x,y,n)]) bound)

<interactive>:65:194: error: parse error on input `)'
Prelude> loop visited bound = (visited ++ filter (\(_,__,n) -> n /= 9) bound, concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get (x-1,y))] 
else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get (x+1,y))] else []) ++ (if x > 0 then [(x-1,y,get (x-1,y))] els]) ++ () else [(x,y,n)]) bound)
<interactive>:66:271: error: Variable not in scope: e
Prelude> loop visited bound = (visited ++ filter (\(_,__,n) -> n /= 9) bound, concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get (x-1,y))] 
else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get (x+1,y))] else []) ++ (if y > 0 then [(x,y-1,get (x,y-1))] else []) ++ (if y < length ar then [(x,y+1,get (x,y+1))] else []) else [(x,y,n)]) bound)

<interactive>:67:135: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x - 1, y)'
      In the expression: get (x - 1, y)
      In the expression: (x - 1, y, get (x - 1, y))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:67:87)
        bound :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:14)
        visited :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:6)
        loop :: [(Int, Int, (Int, Int, c) -> a)]
                -> [(Int, Int, (Int, Int, c) -> a)]
                -> ([(Int, Int, (Int, Int, c) -> a)],
                    [(Int, Int, (Int, Int, c) -> a)])
          (bound at <interactive>:67:1)

<interactive>:67:205: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x + 1, y)'
      In the expression: get (x + 1, y)
      In the expression: (x + 1, y, get (x + 1, y))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:67:87)
        bound :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:14)
        visited :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:6)
        loop :: [(Int, Int, (Int, Int, c) -> a)]
                -> [(Int, Int, (Int, Int, c) -> a)]
                -> ([(Int, Int, (Int, Int, c) -> a)],
                    [(Int, Int, (Int, Int, c) -> a)])
          (bound at <interactive>:67:1)

<interactive>:67:254: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x, y - 1)'
      In the expression: get (x, y - 1)
      In the expression: (x, y - 1, get (x, y - 1))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:67:87)
        bound :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:14)
        visited :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:6)
        loop :: [(Int, Int, (Int, Int, c) -> a)]
                -> [(Int, Int, (Int, Int, c) -> a)]
                -> ([(Int, Int, (Int, Int, c) -> a)],
                    [(Int, Int, (Int, Int, c) -> a)])
          (bound at <interactive>:67:1)

<interactive>:67:311: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x, y + 1)'
      In the expression: get (x, y + 1)
      In the expression: (x, y + 1, get (x, y + 1))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:67:87)
        bound :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:14)
        visited :: [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:67:6)
        loop :: [(Int, Int, (Int, Int, c) -> a)]
                -> [(Int, Int, (Int, Int, c) -> a)]
                -> ([(Int, Int, (Int, Int, c) -> a)],
                    [(Int, Int, (Int, Int, c) -> a)])
          (bound at <interactive>:67:1)
Prelude> newv visited bound = visited ++ filter (\(_,__,n) -> n /= 9) bound
Prelude> :t newv
newv
  :: (Eq a1, Num a1) =>
     [(a2, b, a1)] -> [(a2, b, a1)] -> [(a2, b, a1)]
Prelude> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get (x-1,y))] 

<interactive>:70:97: error:
    parse error (possibly incorrect indentation or mismatched brackets)
Prelude> else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get (x+1,y))] else []) ++ (if y > 0 then [(x,y-1,get (x,y-1))] else []) ++ (if y < lend 

<interactive>:71:1: error: parse error on input `else'
Prelude> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get (x-1,y))] else []) ++ (if x < (length (head ar) - 1) the[]d

<interactive>:72:87: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x - 1, y)'
      In the expression: get (x - 1, y)
      In the expression: (x - 1, y, get (x - 1, y))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:72:39)
        bound :: t (Int, Int, (Int, Int, c) -> a)
          (bound at <interactive>:72:14)
        newb :: p
                -> t (Int, Int, (Int, Int, c) -> a)
                -> [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:72:1)

<interactive>:72:157: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x + 1, y)'
      In the expression: get (x + 1, y)
      In the expression: (x + 1, y, get (x + 1, y))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:72:39)
        bound :: t (Int, Int, (Int, Int, c) -> a)
          (bound at <interactive>:72:14)
        newb :: p
                -> t (Int, Int, (Int, Int, c) -> a)
                -> [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:72:1)

<interactive>:72:206: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x, y - 1)'
      In the expression: get (x, y - 1)
      In the expression: (x, y - 1, get (x, y - 1))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:72:39)
        bound :: t (Int, Int, (Int, Int, c) -> a)
          (bound at <interactive>:72:14)
        newb :: p
                -> t (Int, Int, (Int, Int, c) -> a)
                -> [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:72:1)

<interactive>:72:263: error:
    * Couldn't match expected type `[[a]]'
                  with actual type `(Int, Int)'
    * In the first argument of `get', namely `(x, y + 1)'
      In the expression: get (x, y + 1)
      In the expression: (x, y + 1, get (x, y + 1))
    * Relevant bindings include
        n :: (Int, Int, c) -> a (bound at <interactive>:72:39)
        bound :: t (Int, Int, (Int, Int, c) -> a)
          (bound at <interactive>:72:14)
        newb :: p
                -> t (Int, Int, (Int, Int, c) -> a)
                -> [(Int, Int, (Int, Int, c) -> a)]
          (bound at <interactive>:72:1)
Prelude> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get ar (x-1,y))] else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get ar (x+1,y))] else []) ++ (if y > 0 then [(x,y-1,get ar (x,y-1))] else []) ++ (if y < length ar then [(x,y+1,get ar (x,y+1))] else []) else [(x,y,n)]) bound

<interactive>:73:90: error:
    * Couldn't match expected type `(Int, Int, c0)'
                  with actual type `(Int, Int)'
    * In the second argument of `get', namely `(x - 1, y)'
      In the expression: get ar (x - 1, y)
      In the expression: (x - 1, y, get ar (x - 1, y))

<interactive>:73:163: error:
    * Couldn't match expected type `(Int, Int, c1)'
                  with actual type `(Int, Int)'
    * In the second argument of `get', namely `(x + 1, y)'
      In the expression: get ar (x + 1, y)
      In the expression: (x + 1, y, get ar (x + 1, y))

<interactive>:73:215: error:
    * Couldn't match expected type `(Int, Int, c2)'
                  with actual type `(Int, Int)'
    * In the second argument of `get', namely `(x, y - 1)'
      In the expression: get ar (x, y - 1)
      In the expression: (x, y - 1, get ar (x, y - 1))

<interactive>:73:275: error:
    * Couldn't match expected type `(Int, Int, c3)'
                  with actual type `(Int, Int)'
    * In the second argument of `get', namely `(x, y + 1)'
      In the expression: get ar (x, y + 1)
      In the expression: (x, y + 1, get ar (x, y + 1))
Prelude> :t get
get :: [[a]] -> (Int, Int, c) -> a
Prelude> get a (x, y) = a !! y !! x                                                                    
Prelude> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get ar (x-1,y))] else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get ar (x+1,y))] else []) ++ (if y > 0 then [(x,y-1,get ar (x,y-1))] else []) ++ (if y < length ar then [(x,y+1,get ar (x,y+1))] else []) else [(x,y,n)]) bound
Prelude> :t newb
newb :: Foldable t => p -> t (Int, Int, Int) -> [(Int, Int, Int)]
Prelude> loop (isited, bound) =  (newv visited bound, newb visited bound)                                                                      
                                                                                                                                                         
<interactive>:78:32: error:
    * Variable not in scope: visited :: [(Int, Int, Int)]
    * Perhaps you meant `isited' (line 78)

<interactive>:78:52: error:
    * Variable not in scope: visited
    * Perhaps you meant `isited' (line 78)
Prelude> loop (visited, bound) =  (newv visited bound, newb visited bound)
Prelude> :t loop
loop
  :: ([(Int, Int, Int)], [(Int, Int, Int)])
     -> ([(Int, Int, Int)], [(Int, Int, Int)])
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop (55, 11, get ar (55, 11))

<interactive>:81:67: error:
    * Couldn't match expected type `([(Int, Int, Int)],
                                     [(Int, Int, Int)])'
                  with actual type `(a0, b0, Int)'
    * In the third argument of `until', namely
        `(55, 11, get ar (55, 11))'
      In the expression:
        until
          (\ (visited, bound) -> all (\ (_, __, n) -> n == 9) bound) loop
          (55, 11, get ar (55, 11))
      In an equation for `it':
          it
            = until
                (\ (visited, bound) -> all (\ (_, __, n) -> n == 9) bound) loop
                (55, 11, get ar (55, 11))
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([(55, 11, get ar (55, 11))],[])
([(55,11,0)],[])
Prelude> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])
Interrupted.
Prelude> interate loop ([],[(55, 11, get ar (55, 11))])                                                    

<interactive>:84:1: error:
    * Variable not in scope:
        interate
          :: (([(Int, Int, Int)], [(Int, Int, Int)])
              -> ([(Int, Int, Int)], [(Int, Int, Int)]))
             -> ([a0], [(a1, b0, Int)]) -> t
    * Perhaps you meant one of these:
        `iterate' (imported from Prelude),
        `interact' (imported from Prelude)
Prelude> import Data.List
Prelude Data.List> interate loop ([],[(55, 11, get ar (55, 11))])

<interactive>:86:1: error:
    * Variable not in scope:
        interate
          :: (([(Int, Int, Int)], [(Int, Int, Int)])
              -> ([(Int, Int, Int)], [(Int, Int, Int)]))
             -> ([a0], [(a1, b0, Int)]) -> t
    * Perhaps you meant one of these:
        `iterate' (imported from Prelude),
        `interact' (imported from Prelude),
        iterate' (imported from Data.List)
Prelude Data.List> iterate loop ([],[(55, 11, get ar (55, 11))]) 
[([],[(55,11,0)]),([(55,11,0)],[(54,11,1),(56,11,1),(55,10,1),(55,12,1)]),([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1)],[(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)]),([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)],[(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6)]),([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6)],[(51,11,8),(53,11,2),(52,10,5),(52,12,4),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(53,13,6),(55,13,2),(54,12,2),(54,14,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(57,11,6),(59,11,8),(58,10,8),(58,12,8),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(55,9,4),(57,9,4),(56,8,5),(56,10,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(55,13,2),(57,13,4),(56,12,2),(56,14,5),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(56,1Interrupted.
Prelude Data.List> forM print $ iterate loop ([],[(55, 11, get ar (55, 11))])

<interactive>:88:1: error:
    Variable not in scope:
      forM
        :: (a0 -> IO ()) -> [([(Int, Int, Int)], [(Int, Int, Int)])] -> t
Prelude Data.List> import Data.Monad

<no location info>: error:
    Could not find module `Data.Monad'
    Perhaps you meant
      Data.Monoid (from base-4.14.0.0)
      Data.Kind (from base-4.14.0.0)
      Data.Map (from containers-0.6.2.1)
Prelude Data.List> import Control.Monad
Prelude Data.List Control.Monad> forM print $ iterate loop ([],[(55, 11, get ar (55, 11))])

<interactive>:91:14: error:
    * Couldn't match expected type `IO () -> m b'
                  with actual type `[([(Int, Int, Int)], [(Int, Int, Int)])]'
    * Possible cause: `iterate' is applied to too many arguments
      In the second argument of `($)', namely
        `iterate loop ([], [(55, 11, get ar (55, 11))])'
      In the expression:
        forM print $ iterate loop ([], [(55, 11, get ar (55, 11))])
      In an equation for `it':
          it = forM print $ iterate loop ([], [(55, 11, get ar (55, 11))])
    * Relevant bindings include
        it :: m (a -> b) (bound at <interactive>:91:1)
Prelude Data.List Control.Monad> :t forM
forM :: (Traversable t, Monad m) => t a -> (a -> m b) -> m (t b)
Prelude Data.List Control.Monad> flip forM print $ iterate loop ([],[(55, 11, get ar (55, 11))])
([],[(55,11,0)])
([(55,11,0)],[(54,11,1),(56,11,1),(55,10,1),(55,12,1)])
([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1)],[(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)])
([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)],[(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6)])
([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,11,3),(54,11,1),(53,10Interrupted.
Prelude Data.List Control.Monad> flip forM (\a -> print a >> putStrLn "") $ iterate loop ([],[(55, 11, get ar (55, 11))])
([],[(55,11,0)])

([(55,11,0)],[(54,11,1),(56,11,1),(55,10,1),(55,12,1)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1)],[(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2)],[(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6)],[(51,11,8),(53,11,2),(52,10,5),(52,12,4),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(53,13,6),(55,13,2),(54,12,2),(54,14,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(57,11,6),(59,11,8),(58,10,8),(58,12,8),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(55,9,4),(57,9,4),(56,8,5),(56,10,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(55,13,2),(57,13,4),(56,12,2),(56,14,5),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(55,9,4),(57,9,4),(56,8,5),(56,10,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(55,9,4),(57,9,4),(56,8,5),(56,10,2),(54,8,4),(56,8,5),(55,7,8),(55,9,4),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(53,13,6),(55,13,2),(54,12,2),(54,14,6),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(55,13,2),(57,13,4),(56,12,2),(56,14,5),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(53,13,6),(55,13,2),(54,12,2),(54,14,6),(55,13,2),(57,13,4),(56,12,2),(56,14,5),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(54,14,6),(56,14,5),(55,13,2),(55,15,7)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,11,3),(54,11,1),(53,10,4),(53,12,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(56,11,1),(58,11,7),(57,10,7),(57,12,5),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(53,10,4),(55,10,1),(54,9,3),(54,11,1),(55,10,1),(57,10,7),(56,9,3),(56,11,1),(54,9,3),(56,9,3),(55,8,7),(55,10,1),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,12,3),(55,12,1),(54,11,1),(54,13,4),(55,12,1),(57,12,5),(56,11,1),(56,13,3),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(54,13,4),(56,13,3),(55,12,1),(55,14,6),(51,11,8),(53,11,2),(52,10,5),(52,12,4),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(52,10,5),(54,10,2),(53,9,4),(53,11,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(53,9,4),(55,9,4),(54,8,4),(54,10,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(52,12,4),(54,12,2),(53,11,2),(53,13,6),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(53,13,6),(55,13,2),(54,12,2),(54,14,6),(53,11,2),(55,11,0),(54,10,2),(54,12,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(54,12,2),(56,12,2),(55,11,0),(55,13,2),(55,11,0),(57,11,6),(56,10,2),(56,12,2),(57,11,6),(59,11,8),(58,10,8),(58,12,8),(56,10,2),(58,10,8),(57,9,4),(57,11,6),(56,12,2),(58,12,8),(57,11,6),(57,13,4),(54,10,2),(56,10,2),(55,9,4),(55,11,0),(56,10,2),(58,10,8)Interrupted.
Prelude Data.List Control.Monad> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get ar (x-1,y))] \\ visited else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get ar (x+1,y))] \\ visited else []) ++ (if y > 0 then [(x,y-1,get ar (x,y-1))] \\ visited else []) ++ (if 
y < length ar then [(x,y+1,get ar (x,y+1))] \\ visited else []) else [(x,y,n)]) bound
Prelude Data.List Control.Monad> [a] \\ b = if not (a `elem` b) then [a] else []
Prelude Data.List Control.Monad> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get ar (x-1,y))] \\ visited else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get ar (x+1,y))] \\ visited else []) ++ (if y > 0 then [(x,y-1,get ar (x,y-1))] \\ visited else []) ++ (if 
y < length ar then [(x,y+1,get ar (x,y+1))] \\ visited else []) else [(x,y,n)]) bound
Prelude Data.List Control.Monad> loop (visited, bound) =  (newv visited bound, newb visited bound)                                 
Prelude Data.List Control.Monad> flip forM (\a -> print a >> putStrLn "") $ iterate loop ([],[(55, 11, get ar (55, 11))])
([],[(55,11,0)])

([(55,11,0)],[(54,11,1),(56,11,1),(55,10,1),(55,12,1)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1)],[(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2)],[(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6)],[(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6),(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7)],[(50,11,9),(51,10,7),(51,12,6),(51,10,7),(52,9,5),(51,12,6),(52,13,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(54,15,9),(60,11,9),(59,10,9),(59,12,9),(59,10,9),(58,9,9),(59,12,9),(58,13,6),(59,10,9),(58,9,9),(58,9,9),(57,8,6),(59,12,9),(58,13,6),(58,13,6),(57,14,6),(59,10,9),(58,9,9),(58,9,9),(57,8,6),(58,9,9),(57,8,6),(57,8,6),(56,7,7),(59,12,9),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(59,10,9),(58,9,9),(58,9,9),(57,8,6),(58,9,9),(57,8,6),(57,8,6),(56,7,7),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(58,9,9),(57,8,6),(57,8,6),(56,7,7),(53,8,5),(54,7,5),(57,8,6),(56,7,7),(54,7,5),(56,7,7),(55,6,9),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(54,15,9),(59,12,9),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(52,13,7),(53,14,7),(53,14,7),(54,15,9),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(53,14,7),(54,15,9),(57,14,6),(56,15,8),(54,15,9),(56,15,8),(55,16,8)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6),(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),5 
8,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7),(51,10,7),(51,12,6),(51,10,7),(52,9,5),(51,12,6),(52,13,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,8,6),(58,13,6),(58,13,6),(57,14,6),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(56,7,7),(53,8,5),(54,7,5),(57,8,6),(56,7,7),(54,7,5),(56,7,7),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(53,14,7),(57,14,6),(56,15,8),(56,15,8),(55,16,8)],[(50,11,9),(50,10,8),(51,9,6),(50,12,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(50,12,8),(51,13,8),(51,13,8),(52,14,9),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(52,14,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(54,6,9),(50,12,8),(51,13,8),(51,13,8),(52,14,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(60,11,9),(59,10,9),(59,12,9),(59,10,9),(58,9,9),(59,12,9),(59,13,7),(58,14,7),(59,10,9),(58,9,9),(58,9,9),(58,8,8),(57,7,9),(59,12,9),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,10,9),(58,9,9),(58,9,9),(58,8,8),(57,7,9),(58,9,9),(58,8,8),(57,7,9),(58,8,8),(57,7,9),(57,7,9),(56,6,9),(59,12,9),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(56,16,9),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(54,6,9),(59,10,9),(58,9,9),(58,9,9),(58,8,8),(57,7,9),(58,9,9),(58,8,8),(57,7,9),(58,8,8),(57,7,9),(57,7,9),(56,6,9),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(54,6,9),(58,9,9),(58,8,8),(57,7,9),(58,8,8),(57,7,9),(57,7,9),(56,6,9),(52,8,6),(53,7,6),(53,7,6),(54,6,9),(58,8,8),(57,7,9),(57,7,9),(56,6,9),(53,7,6),(54,6,9),(57,7,9),(56,6,9),(55,6,9),(50,12,8),(51,13,8),(51,13,8),(52,14,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(59,12,9),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(56,16,9),(51,13,8),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(56,16,9),(52,14,9),(53,15,9),(54,15,9),(58,14,7),(57,15,7),(57,15,7),(56,16,9),(54,15,9),(57,15,7),(56,16,9),(54,16,9),(56,16,9),(55,17,9)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6),(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7),(51,10,7),(51,12,6),(51,10,7),(52,9,5),(51,12,6),(52,13,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,8,6),(58,13,6),(58,13,6),(57,14,6),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(56,7,7),(53,8,5),(54,7,5),(57,8,6),(56,7,7),(54,7,5),(56,7,7),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(53,14,7),(57,14,6),(56,15,8),(56,15,8),(55,16,8),(50,10,8),(51,9,6),(50,12,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(50,12,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,8,8),(58,8,8),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(58,8,8),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(51,13,8),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(57,15,7)],[(50,11,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(51,8,7),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(51,8,7),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(51,8,7),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(51,8,7),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(52,7,8),(53,6,9),(54,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(60,11,9),(59,10,9),(59,12,9),(59,10,9),(58,9,9),(59,12,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,12,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(59,12,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(58,15,8),(57,16,9),(56,16,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(51,8,7),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(52,7,8),(53,6,9),(54,6,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(50,9,9),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(52,7,8),(53,6,9),(54,6,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(51,8,7),(52,7,8),(52,7,8),(53,6,9),(52,7,8),(53,6,9),(54,6,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(52,7,8),(53,6,9),(54,6,9),(57,7,9),(56,6,9),(55,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(59,12,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(58,15,8),(57,16,9),(56,16,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(60,13,8),(59,12,9),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(58,15,8),(57,16,9),(56,16,9),(52,14,9),(53,15,9),(54,15,9),(59,14,8),(58,15,8),(58,15,8),(57,16,9),(58,15,8),(57,16,9),(56,16,9),(54,15,9),(58,15,8),(57,16,9),(56,16,9),(54,16,9),(56,16,9),(55,17,9)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6),(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7),(51,10,7),(51,12,6),(51,10,7),(52,9,5),(51,12,6),(52,13,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,8,6),(58,13,6),(58,13,6),(57,14,6),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(56,7,7),(53,8,5),(54,7,5),(57,8,6),(56,7,7),(54,7,5),(56,7,7),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(53,14,7),(57,14,6),(56,15,8),(56,15,8),(55,16,8),(50,10,8),(51,9,6),(50,12,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(50,12,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,8,8),(58,8,8),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(58,8,8),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(51,13,8),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(57,15,7),(51,8,7),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(52,7,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(58,15,8)],[(50,11,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(60,11,9),(59,10,9),(59,12,9),(59,10,9),(58,9,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(57,7,9),(56,6,9),(55,6,9),(49,12,9),(50,11,9),(Interrupted.
Prelude Data.List Control.Monad> flip forM (\a -> print a >> putStrLn "") $ iterate loop ([],[(55, 11, get ar (55, 11))])
([],[(55,11,0)])

([(55,11,0)],[(54,11,1),(56,11,1),(55,10,1),(55,12,1)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1)],[(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2)],[(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6)],[(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7)])

([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53Interrupted.
Prelude Data.List Control.Monad> until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])
([(55,11,0),(54,11,1),(56,11,1),(55,10,1),(55,12,1),(53,11,2),(54,10,2),(54,12,2),(57,11,6),(56,10,2),(56,12,2),(54,10,2),(56,10,2),(55,9,4),(54,12,2),(56,12,2),(55,13,2),(52,11,3),(53,10,4),(53,12,3),(53,10,4),(54,9,3),(53,12,3),(54,13,4),(58,11,7),(57,10,7),(57,12,5),(57,10,7),(56,9,3),(57,12,5),(56,13,3),(53,10,4),(54,9,3),(57,10,7),(56,9,3),(54,9,3),(56,9,3),(55,8,7),(53,12,3),(54,13,4),(57,12,5),(56,13,3),(54,13,4),(56,13,3),(55,14,6),(51,11,8),(52,10,5),(52,12,4),(52,10,5),(53,9,4),(52,12,4),(53,13,6),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(59,11,8),(58,10,8),(58,12,8),(58,10,8),(57,9,4),(58,12,8),(57,13,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(52,10,5),(53,9,4),(53,9,4),(54,8,4),(58,10,8),(57,9,4),(57,9,4),(56,8,5),(53,9,4),(54,8,4),(57,9,4),(56,8,5),(54,8,4),(56,8,5),(55,7,8),(52,12,4),(53,13,6),(53,13,6),(54,14,6),(58,12,8),(57,13,4),(57,13,4),(56,14,5),(53,13,6),(54,14,6),(57,13,4),(56,14,5),(54,14,6),(56,14,5),(55,15,7),(51,10,7),(51,12,6),(51,10,7),(52,9,5),(51,12,6),(52,13,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,8,6),(58,13,6),(58,13,6),(57,14,6),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(51,10,7),(52,9,5),(52,9,5),(53,8,5),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(57,8,6),(56,7,7),(52,9,5),(53,8,5),(53,8,5),(54,7,5),(57,8,6),(57,8,6),(56,7,7),(53,8,5),(54,7,5),(57,8,6),(56,7,7),(54,7,5),(56,7,7),(51,12,6),(52,13,7),(52,13,7),(53,14,7),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(58,13,6),(57,14,6),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(52,13,7),(53,14,7),(53,14,7),(58,13,6),(57,14,6),(57,14,6),(56,15,8),(53,14,7),(57,14,6),(56,15,8),(56,15,8),(55,16,8),(50,10,8),(51,9,6),(50,12,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(50,12,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,8,8),(58,8,8),(58,8,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(50,10,8),(51,9,6),(51,9,6),(52,8,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(58,8,8),(51,9,6),(52,8,6),(52,8,6),(53,7,6),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(58,8,8),(52,8,6),(53,7,6),(53,7,6),(58,8,8),(53,7,6),(50,12,8),(51,13,8),(51,13,8),(51,13,8),(51,13,8),(59,13,7),(58,14,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(51,13,8),(59,13,7),(58,14,7),(58,14,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(58,14,7),(57,15,7),(57,15,7),(57,15,7),(51,8,7),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(51,8,7),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(51,8,7),(51,8,7),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(51,8,7),(52,7,8),(52,7,8),(52,7,8),(52,7,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(60,13,8),(59,14,8),(59,14,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(59,14,8),(58,15,8),(58,15,8),(58,15,8),(58,15,8)],[(50,11,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(60,11,9),(59,10,9),(59,12,9),(59,10,9),(58,9,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(49,10,9),(50,9,9),(50,11,9),(50,9,9),(50,8,9),(51,7,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(59,10,9),(58,9,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(50,9,9),(50,8,9),(51,7,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(58,9,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(50,8,9),(51,7,9),(51,7,9),(52,6,9),(51,7,9),(52,6,9),(53,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(59,8,9),(58,7,9),(58,9,9),(57,7,9),(57,7,9),(56,6,9),(51,7,9),(52,6,9),(53,6,9),(54,6,9),(57,7,9),(56,6,9),(55,6,9),(49,12,9),(50,11,9),(50,13,9),(50,13,9),(51,14,9),(50,13,9),(51,14,9),(52,14,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(59,12,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(50,13,9),(51,14,9),(52,14,9),(52,14,9),(53,15,9),(52,14,9),(53,15,9),(54,15,9),(61,13,9),(60,12,9),(60,14,9),(59,12,9),(60,14,9),(59,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(52,14,9),(53,15,9),(54,15,9),(60,14,9),(59,15,9),(59,15,9),(58,16,9),(59,15,9),(58,16,9),(57,16,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(54,15,9),(59,15,9),(58,16,9),(57,16,9),(56,16,9),(54,16,9),(56,16,9),(55,17,9)])
Prelude Data.List Control.Monad> length . snd $ until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])
536
Prelude Data.List Control.Monad> length . fst $ until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])
476
Prelude Data.List Control.Monad> length . nib . fst $ until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])

<interactive>:104:10: error:
    * Variable not in scope: nib :: [(Int, Int, Int)] -> t0 a0
    * Perhaps you meant `nub' (imported from Data.List)
Prelude Data.List Control.Monad> length . nub . fst $ until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop ([],[(55, 11, get ar (55, 11))])
69
Prelude Data.List Control.Monad> :t (length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop)                            
(length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop)
  :: ([(Int, Int, Int)], [(Int, Int, Int)]) -> Int
Prelude Data.List Control.Monad> map (length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop . (\(x,y) -> ([],[(x,y))])))
<interactive>:107:1: error:
    * No instance for (Show ([(Int, Int)] -> [Int]))
        arising from a use of `print'
        (maybe you haven't applied a function to enough arguments?)
    * In a stmt of an interactive GHCi command: print it
Prelude Data.List Control.Monad> map (length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop . (\(x,y) -> ([],[(x,y,get ar (x,y))]))) pts
[4,2,21,37,10,12,24,56,58,69,22,57,29,67,15,23,26,8,62,18,21,77,22,49,69,2,47,57,44,9,82,3,44,5,12,23,27,2,44,2,16,19,41,2,26,69,39,89,4,46,39,27,11,62,38,6,47,20,7,35,43,39,14,24,2,7,87,17,49,58,36,92,15,82,76,45,64,19,13,8,8,17,46,76,22,37,58,9,15,87,63,22,30,17,50,94,6,4,11,33,11,47,10,50,27,15,44,5,4,70,18,3,24,50,16,11,66,10,23,106,71,10,2,10,81,5,9,47,33,60,31,10,4,48,90,34,68,19,18,56,41,29,4,91,34,18,2,53,5,8,2,4,2,8,51,11,2,15,8,60,75,9,45,13,7,8,50,59,3,23,67,25,29,3,75,55,35,5,14,10,23,22,7,2,8,4,62,5,7,17,30,35,42,19,70,67,33,72,14,79,3,6,38,85,88,11,17,47,6,30,4,16,4,4,14,*** Exception: Prelude.!!: index too large
Prelude Data.List Control.Monad> newb visited bound = concatMap (\(x,y,n) -> if n /= 9 then (if x > 0 then [(x-1,y,get ar (x-1,y))] \\ visited else []) ++ (if x < (length (head ar) - 1) then [(x+1,y,get ar (x+1,y))] \\ visited else []) ++ (if y > 0 then [(x,y-1,get ar (x,y-1))] \\ visited else []) ++ (if 
y < length ar - 1 then [(x,y+1,get ar (x,y+1))] \\ visited else []) else [(x,y,n)]) bound
Prelude Data.List Control.Monad> loop (visited, bound) =  (newv visited bound, newb visited bound)                                                      
Prelude Data.List Control.Monad> map (length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop . (\(x,y) -> ([],[(x,y,get ar (x,y))]))) pts
[4,2,21,37,10,12,24,56,58,69,22,57,29,67,15,23,26,8,62,18,21,77,22,49,69,2,47,57,44,9,82,3,44,5,12,23,27,2,44,2,16,19,41,2,26,69,39,89,4,46,39,27,11,62,38,6,47,20,7,35,43,39,14,24,2,7,87,17,49,58,36,92,15,82,76,45,64,19,13,8,8,17,46,76,22,37,58,9,15,87,63,22,30,17,50,94,6,4,11,33,11,47,10,50,27,15,44,5,4,70,18,3,24,50,16,11,66,10,23,106,71,10,2,10,81,5,9,47,33,60,31,10,4,48,90,34,68,19,18,56,41,29,4,91,34,18,2,53,5,8,2,4,2,8,51,11,2,15,8,60,75,9,45,13,7,8,50,59,3,23,67,25,29,3,75,55,35,5,14,10,23,22,7,2,8,4,62,5,7,17,30,35,42,19,70,67,33,72,14,79,3,6,38,85,88,11,17,47,6,30,4,16,4,4,14,32,62,90,30,55,28,46,22,56,28,42,2,2]
Prelude Data.List Control.Monad> done = map (length . nub . fst . until (\(visited, bound) -> all (\(_,__,n) -> n == 9) bound) loop . (\(x,y) -> ([],[(x,y,get ar (x,y))]))) pts
Prelude Data.List Control.Monad> maximum done
106
Prelude Data.List Control.Monad> maximum $ delete done 106

<interactive>:114:23: error:
    * No instance for (Num [[Int]]) arising from the literal `106'
    * In the second argument of `delete', namely `106'
      In the second argument of `($)', namely `delete done 106'
      In the expression: maximum $ delete done 106
Prelude Data.List Control.Monad> maximum $ delete 106 done
94
Prelude Data.List Control.Monad> sort done
[2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,12,12,13,13,14,14,14,14,15,15,15,15,15,16,16,16,17,17,17,17,17,18,18,18,18,19,19,19,19,20,21,21,22,22,22,22,22,22,23,23,23,23,23,24,24,24,25,26,26,27,27,27,28,28,29,29,29,30,30,30,30,31,32,33,33,33,34,34,35,35,35,36,37,37,38,38,39,39,39,41,41,42,42,43,44,44,44,44,45,45,46,46,46,47,47,47,47,47,48,49,49,50,50,50,50,51,53,55,55,56,56,56,57,57,58,58,58,59,60,60,62,62,62,62,63,64,66,67,67,67,68,69,69,69,70,70,71,72,75,75,76,76,77,79,81,82,82,85,87,87,88,89,90,90,91,92,94,106]
Prelude Data.List Control.Monad> 92*94*106
916688
Prelude Data.List Control.Monad>