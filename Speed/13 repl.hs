Ben/PRO/Stu/Advent of Code 2021> ghci
GHCi, version 8.10.1: https://www.haskell.org/ghc/  :? for help
macro 'doc' overwrites builtin command.  Use ':def!' to overwrite.
Loaded GHCi configuration from C:\Users\Camto\AppData\Roaming\ghc\ghci.conf
Prelude> f<-readFile"Speed/qr.txt"
Prelude> f
"6 10\n0 14\n9 10\n0 3\n10 4\n4 11\n6 0\n6 12\n4 1\n0 13\n10 12\n3 4\n3 0\n8 4\n1 10\n2 14\n8 10\n9 0"
Prelude> ar = map ((\[a,b]->(a,b)) . map int . words) f

<interactive>:3:33: error:
    * Variable not in scope: int :: String -> b      
    * Perhaps you meant one of these:
        `init' (imported from Prelude), `it' (line 2)
Prelude> ar = map ((\[a,b]->(a,b)) . map read . words) f :: [[Int]]

<interactive>:4:6: error:
    * Couldn't match type `(b0, b0)' with `[Int]'
      Expected type: [[Int]]
        Actual type: [(b0, b0)]
    * In the expression:
          map ((\ [a, b] -> (a, b)) . map read . words) f :: [[Int]]
      In an equation for `ar':
          ar = map ((\ [a, b] -> (a, b)) . map read . words) f :: [[Int]]

<interactive>:4:47: error:
    * Couldn't match type `Char' with `[Char]'
      Expected type: [String]
        Actual type: String
    * In the second argument of `map', namely `f'
      In the expression:
          map ((\ [a, b] -> (a, b)) . map read . words) f :: [[Int]]
      In an equation for `ar':
          ar = map ((\ [a, b] -> (a, b)) . map read . words) f :: [[Int]]
Prelude> ar = map ((\[a,b]->(a,b)) . map read . words) f :: [(Int, Int)]

<interactive>:5:47: error:
    * Couldn't match type `Char' with `[Char]'
      Expected type: [String]
        Actual type: String
    * In the second argument of `map', namely `f'
      In the expression:
          map ((\ [a, b] -> (a, b)) . map read . words) f :: [(Int, Int)]
      In an equation for `ar':
          ar
            = map ((\ [a, b] -> (a, b)) . map read . words) f :: [(Int, Int)]
Prelude> ar = map ((\[a,b]->(a,b)) . map read . words) $ lines f :: [(Int, Int)]
Prelude> ar
[(6,10),(0,14),(9,10),(0,3),(10,4),(4,11),(6,0),(6,12),(4,1),(0,13),(10,12),(3,4),(3,0),(8,4),(1,10),(2,14),(8,10),(9,0)]
Prelude> foldy yaxis p@(x,y) = if y < yaxis then p else (x,yaxis*2 - y - 1)
Prelude> map (foldy 7) ar
[(6,3),(0,-1),(9,3),(0,3),(10,4),(4,2),(6,0),(6,1),(4,1),(0,0),(10,1),(3,4),(3,0),(8,4),(1,3),(2,-1),(8,3),(9,0)]
Prelude> foldy yaxis p@(x,y) = if y < yaxis then p else (x,yaxis*2 - y)    
Prelude> map (foldy 7) ar
[(6,4),(0,0),(9,4),(0,3),(10,4),(4,3),(6,0),(6,2),(4,1),(0,1),(10,2),(3,4),(3,0),(8,4),(1,4),(2,0),(8,4),(9,0)]
Prelude> import Data.List
Prelude Data.List> length ar
18
Prelude Data.List> length . nip $ map (foldy 7) ar

<interactive>:14:10: error:
    * Variable not in scope: nip :: [(Int, Int)] -> t0 a0
    * Perhaps you meant `zip' (imported from Prelude)
Prelude Data.List> length . nub $ map (foldy 7) ar
17
Prelude Data.List> f<-readFile"Speed/qr2.txt"
Prelude Data.List> arr = map ((\[a,b]->(a,b)) . map read . words) $ lines f :: [(Int, Int)]
Prelude Data.List> arr
[(1284,359),(47,25),(699,764),(55,204),(552,247),(731,877),(765,12),(619,806),(437,864),(1202,152),(105,456),(159,165),(648,563),(701,143),(609,861),(972,414),(1195,379),(1097,439),(358,95),(1126,288),(773,332),(863,813),(1250,63),(1280,95),(1237,672),(224,343),(1222,488),(748,842),(554,208),(1086,215),(1136,479),(1308,826),(371,367),(972,722),(766,719),(80,366),(920,22),(765,882),(1208,354),(994,526),(512,430),(1007,507),(773,695),(909,672),(370,231),(38,812),(766,495),(1078,534),(633,408),(233,770),(251,429),(874,315),(649,666),(1140,868),(1138,75),(808,441),(864,150),(1066,814),(440,674),(477,238),(1290,739),(786,434),(263,42),(306,891),(1086,652),(248,621),(515,387),(378,730),(1255,189),(769,187),(70,473),(408,773),(1039,581),(373,312),(537,562),(1078,360),(1036,775),(925,565),(1022,530),(132,207),(1027,815),(869,7),(631,281),(725,404),(945,305),(1173,509),(678,338),(788,207),(447,753),(166,740),(745,199),(49,383),(1151,729),(1255,705),(351,507),(648,331),(1,208),(728,299),(174,479),(224,215),(179,372),(497,541),(445,84),(952,95),(1136,422),(1253,341),(251,877),(269,150),(227,154),(597,341),(72,343),(657,656),(900,473),(117,562),(990,474),(1096,326),(524,147),(1228,473),(990,420),(360,434),(493,47),(582,299),(843,266),(1220,850),(370,103),(176,26),(1192,430),(890,252),(1235,809),(1220,318),(666,332),(711,481),(1083,154),(825,2),(365,305),(566,854),(1278,658),(213,887),(26,7),(766,399),(448,47),(892,549),(349,38),(605,168)Interrupted.
Prelude Data.List> foldx xaxis p@(x,y) = if x < xaxis then p else (xaxis*2 - x,y)
Prelude Data.List> length . nub $ map (foldx 655) arr
602
Prelude Data.List> data Fold = X | Y   
Prelude Data.List> folds = [(X,655),(Y,447),(X,327),(Y,223),(X,163),(Y,111),(X,81),(Y,55),(X,40),(Y,27),(Y,13),(Y,6)]
Prelude Data.List> foldl' (\paper (fold,num) -> map (if fold == X then foldx num else foldy num) paper) arr folds

<interactive>:23:38: error:
    * No instance for (Eq Fold) arising from a use of `=='
    * In the expression: fold == X
      In the first argument of `map', namely
        `(if fold == X then foldx num else foldy num)'
      In the expression:
        map (if fold == X then foldx num else foldy num) paper
Prelude Data.List> 
Prelude Data.List> data Fold = X | Y deriving (Eq, Show)
Prelude Data.List> folds = [(X,655),(Y,447),(X,327),(Y,223),(X,163),(Y,111),(X,81),(Y,55),(X,40),(Y,27),(Y,13),(Y,6)]
Prelude Data.List> foldl' (\paper (fold,num) -> map (if fold == X then foldx num else foldy num) paper) arr folds
[(26,3),(33,1),(37,4),(25,4),(20,3),(5,3),(27,0),(35,4),(27,2),(26,0),(23,4),(3,1),(6,3),(35,3),(35,5),(10,4),(33,1),(31,5),(30,1),(20,4),(35,2),(37,1),(20,5),(30,1),(7,0),(20,5),(6,0),(10,2),(18,0),(20,5),(10,3),(2,0),(37,3),(10,4),(28,5),(0,2),(18,4),(27,0),(20,4),(10,4),(20,2),(23,3),(35,3),(7,0),(38,5),(38,0),(28,5),(12,2),(21,2),(11,0),(5,3),(26,5),(5,4),(6,0),(8,5),(10,5),(36,2),(0,2),(30,2),(13,0),(20,1),(32,0),(17,0),(20,3),(20,4),(2,5),(23,3),(30,2),(25,5),(31,5),(10,1),(0,3),(25,5),(35,4),(35,2),(12,2),(28,5),(23,5),(38,0),(30,1),(37,3),(31,5),(23,1),(11,0),(37,1),(25,5),(22,2),(30,1),(37,1),(2,0),(7,3),(31,5),(3,1),(25,5),(23,3),(6,3),(1,0),(8,5),(10,3),(20,5),(15,4),(5,3),(35,0),(30,1),(10,2),(23,5),(5,3),(23,2),(17,0),(23,5),(8,5),(1,0),(0,1),(35,2),(6,0),(30,4),(32,5),(0,1),(6,0),(32,0),(1,5),(8,5),(23,0),(8,2),(38,5),(12,0),(36,2),(10,0),(5,1),(8,2),(10,2),(25,5),(17,0),(5,2),(37,1),(6,0),(32,0),(31,5),(26,5),(28,5),(38,5),(8,3),(21,2),(31,0),(23,0),(18,2),(23,3),(7,0),(10,4),(17,0),(22,2),(3,1),(32,0),(3,4),(28,5),(37,1),(17,0),(23,5),(13,0),(3,1),(10,2),(5,3),(21,2),(38,0),(12,0),(20,4),(0,3),(20,3),(20,5),(20,3),(38,5),(30,1),(7,0),(20,2),(2,0),(8,5),(10,4),(10,5),(1,0),(18,4),(5,3),(35,0),(6,0),(36,2),(26,5),(28,5),(20,3),(18,4),(23,0),(6,0),(30,3),(18,4),(37,3),(38,5),(3,4),(10,2),(1,0),(37,3),(25,5),(7,3),(18,3),(5,3),(25,0),(22,2),(27,0),(27,2),(0,1),(31,5),(23,4),(3,1),(33,1),(17,0),(23,4),(37,4),(5,3),(37,1),(3,1),(22,2),(31,5),(31,5),(33,1),(1,5),(36,2),(21,2),(8,1),(5,5),(10,4),(38,5),(28,0),(25,4),(3,4),(3,1),(5,3),(20,1),(5,3),(35,4),(27,5),(2,5),(8,4),(31,5),(28,5),(8,3),(33,1),(5,3),(5,3),(2,0),(10,5),(16,5),(18,4),(6,0),(20,1),(5,3),(25,5),(10,2),(28,5),(31,5),(5,3),(1,5),(0,1),(5,3),(23,2),(20,5),(25,5),(23,2),(3,1),(23,2),(10,5),(3,1),(5,3),(10,4),(10,0),(5,5),(3,4),(7,0),(25,5),(38,5),(25,4),(35,5),(37,4),(10,0),(35,0),(22,2),(13,0),(10,4),(15,4),(33,1),(10,2),(20,1),(10,2),(0,4),(23,1),(18,4),(10,2),(23,2),(27,2),(30,2),(12,0),(25,4),(35,4),(10,3),(21,2),(37,1),(38,0),(23,0),(3,1),(12,0),(8,5),(28,0),(11,2),(1,5),(3,4),(33,1),(33,1),(38,5),(6,0),(25,0),(18,1),(20,3),(3,1),(28,0),(35,5),(7,3),(37,1),(37,3),(23,4),(38,0),(20,5),(20,5),(3,4),(17,5),(37,4),(28,5),(28,5),(10,0),(12,0),(0,2),(2,0),(27,5),(28,0),(37,4),(30,1),(38,0),(16,5),(22,2),(31,5),(10,2),(7,0),(28,0),(28,1),(20,4),(38,0),(20,3),(31,5),(10,2),(10,0),(35,2),(30,4),(20,4),(18,4),(0,1),(27,0),(31,5),(38,0),(17,0),(32,5),(2,0),(23,4),(1,5),(10,2),(25,0),(37,4),(35,5),(10,4),(31,5),(25,0),(33,1),(30,1),(11,2),(1,5),(11,0),(10,5),(35,0),(26,5),(25,0),(32,0),(37,3),(28,0),(5,3),(18,2),(20,0),(20,4),(5,5),(20,5),(11,0),(21,2),(8,2),(20,4),(17,0),(6,0),(0,2),(10,4),(17,5),(25,0),(38,0),(36,2),(10,2),(8,2),(3,4),(5,3),(38,0),(27,0),(20,4),(36,2),(18,3),(25,4),(18,4),(22,2),(0,2),(32,0),(6,3),(37,3),(31,5),(8,2),(5,3),(5,3),(2,0),(30,1),(21,2),(17,5),(18,4),(8,2),(8,4),(10,2),(10,4),(35,0),(18,3),(33,1),(3,4),(5,2),(17,5),(6,0),(17,0),(23,4),(33,1),(27,2),(10,0),(16,5),(30,4),(22,2),(35,2),(33,4),(12,0),(5,3),(23,2),(27,5),(25,0),(17,5),(33,1),(23,3),(37,1),(26,0),(8,2),(17,0),(27,2),(5,5),(20,4),(2,0),(17,5),(35,5),(28,5),(35,0),(33,1),(27,0),(33,1),(6,0),(5,3),(7,0),(3,1),(10,4),(30,1),(35,4),(22,2),(28,0),(23,0),(7,0),(31,5),(28,0),(3,1),(5,5),(20,5),(3,4),(31,5),(35,5),(20,4),(7,3),(8,3),(10,4),(33,1),(0,2),(27,5),(35,2),(10,4),(23,2),(23,4),(17,5),(8,5),(2,5),(10,4),(5,5),(7,0),(18,2),(10,2),(20,4),(35,2),(32,0),(26,5),(10,2),(5,3),(0,3),(5,3),(28,0),(25,0),(11,0),(7,0),(27,0),(10,2),(35,1),(27,5),(1,0),(27,2),(23,3),(27,2),(3,1),(38,0),(30,1),(32,5),(2,0),(38,5),(20,5),(5,3),(26,5),(5,3),(27,2),(3,4),(23,2),(5,3),(17,0),(2,0),(20,4),(20,5),(17,0),(38,5),(6,0),(13,0),(37,4),(27,0),(10,0),(37,1),(17,0),(22,2),(0,2),(28,0),(8,3),(20,1),(20,5),(28,5),(25,0),(35,4),(32,5),(35,5),(20,5),(35,4),(0,1),(17,0),(10,2),(5,5),(8,5),(30,2),(31,0),(5,3),(36,2),(5,5),(23,0),(10,5),(0,2),(35,2),(17,5),(35,3),(20,5),(2,0),(3,1),(25,5),(33,1),(10,0),(31,5),(35,0),(20,5),(38,0),(23,3),(35,0),(1,5),(8,5),(35,3),(35,5),(0,1),(26,3),(5,3),(31,5),(20,4),(31,5),(10,0),(5,1),(0,3),(30,1),(20,2),(10,2),(2,0),(10,4),(26,5),(5,3),(33,1),(20,5),(10,2),(37,3),(11,0),(33,4),(32,0),(35,5),(3,1),(10,4),(18,3),(18,2),(12,0),(10,4),(11,2),(25,4),(6,0),(23,5),(30,3),(20,4),(31,5),(1,0),(3,4),(28,5),(17,5),(0,3),(12,0),(35,3),(32,0),(20,5),(8,2),(10,4),(8,2),(35,2),(23,4),(20,0),(27,2),(36,2),(2,0),(11,0),(30,2),(10,2),(38,0),(7,0),(20,5),(23,2),(10,4),(23,4),(35,2),(35,5),(28,1),(35,0),(33,1),(18,4),(37,4),(23,2),(8,4),(20,5),(2,5),(28,0),(26,5),(37,3),(37,4),(5,1),(28,1),(2,0),(18,1),(2,5),(26,5),(10,4),(20,5),(35,4),(5,3),(10,4),(38,5),(22,2),(5,3),(10,4),(38,5),(20,5),(10,4),(7,0),(20,5),(30,4),(35,4),(31,5),(28,5),(36,2),(35,5),(33,1),(10,4),(10,0),(36,2),(17,5),(7,0),(28,0),(11,2),(5,3),(38,5),(11,0),(23,5),(6,0),(26,3),(23,3),(35,5),(20,5),(0,2),(18,3),(30,2),(10,4),(32,0),(37,4),(10,4),(5,2),(10,4)]
Prelude Data.List> done = foldl' (\paper (fold,num) -> map (if fold == X then foldx num else foldy num) paper) arr folds
Prelude Data.List> length done
735
Prelude Data.List> length $ nub done
92
Prelude Data.List> done2 = nub done
Prelude Data.List> done2
[(26,3),(33,1),(37,4),(25,4),(20,3),(5,3),(27,0),(35,4),(27,2),(26,0),(23,4),(3,1),(6,3),(35,3),(35,5),(10,4),(31,5),(30,1),(20,4),(35,2),(37,1),(20,5),(7,0),(6,0),(10,2),(18,0),(10,3),(2,0),(37,3),(28,5),(0,2),(18,4),(20,2),(23,3),(38,5),(38,0),(12,2),(21,2),(11,0),(26,5),(5,4),(8,5),(10,5),(36,2),(30,2),(13,0),(20,1),(32,0),(17,0),(2,5),(25,5),(10,1),(0,3),(23,5),(23,1),(22,2),(7,3),(1,0),(15,4),(35,0),(23,2),(0,1),(30,4),(32,5),(1,5),(23,0),(8,2),(12,0),(10,0),(5,1),(5,2),(8,3),(31,0),(18,2),(3,4),(30,3),(18,3),(25,0),(8,1),(5,5),(28,0),(27,5),(8,4),(16,5),(0,4),(11,2),(18,1),(17,5),(28,1),(20,0),(33,4),(35,1)]
Prelude Data.List> replicate 30 ' '
"                              "
Prelude Data.List> replicate 30 (replicate 30 ' ')
["                              ","                              ","                              ","                              ","     
                         ","                              ","                              ","                              ","
                  ","                              ","                              ","                              ","                   
           ","                              ","                              ","                              ","
    ","                              ","                              ","                              ","                              ","                              ","                              ","                              ","                              ","       
                       ","                              ","                              ","                              ","
                "]
Prelude Data.List> page = replicate 30 (replicate 30 ' ')
Prelude Data.List> foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' ec) $ zip [0..] row) $ zip [0..] page)
<interactive>:36:1: error:
    * No instance for (Show
                         ([[Char]] -> [(Integer, Integer)] -> [[Char]]))
        arising from a use of `print'
        (maybe you haven't applied a function to enough arguments?)
    * In a stmt of an interactive GHCi command: print it
Prelude Data.List> foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' else c) $ zip [0..] row) $ zip [0..] page) page done2
[" ##   ##  ####   ## #  # #### ","#  # #  # #       # #  #    # ","#    #  # ###     # ####   #  ","#    #### #       # #  #  #   ","#  # 
#  # #    #  # #  # #    "," ##  #  # #     ##  #  # #### ","                              ","                              ","
                  ","                              ","                              ","                              ","  
           ","                              ","                              ","                              ","
    ","                              ","                              ","                              ","                              ","                              ","                              ","                              ","                              ","       
                       ","                              ","                              ","                              ","
                "]
Prelude Data.List> putStrLn $ foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' else c) $ zip [0..] row) $ 
zip [0..] page) page done2

<interactive>:38:12: error:
    * Couldn't match type `[Char]' with `Char'
      Expected type: String
        Actual type: [[Char]]
    * In the second argument of `($)', namely
        `foldl'
           (\ page coord
              -> map
                   (\ (y, row)
                      -> map (\ (x, c) -> if coord == (x, y) then '#' else c)
                           $ zip [0 .. ] row)
                   $ zip [0 .. ] page)
           page done2'
      In the expression:
        putStrLn
          $ foldl'
              (\ page coord
                 -> map
                      (\ (y, row)
                         -> map (\ (x, c) -> if coord == (x, y) then '#' else c)
                              $ zip [0 .. ] row)
                      $ zip [0 .. ] page)
              page done2
      In an equation for `it':
          it
            = putStrLn
                $ foldl'
                    (\ page coord
                       -> map
                            (\ (y, row)
                               -> map (\ (x, c) -> if coord == ... then '#' else c)
                                    $ zip [0 .. ] row)
                            $ zip [0 .. ] page)
                    page done2
Prelude Data.List> putStrLn . unlines $ foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' else c) $ zip [0..] row) $ zip [0..] page) page done2
 ##   ##  ####   ## #  # ####
#  # #  # #       # #  #    #
#    #  # ###     # ####   #
#    #### #       # #  #  #   
#  # #  # #    #  # #  # #
 ##  #  # #     ##  #  # ####























                              

Prelude Data.List> done = foldl' (\paper (fold,num) -> map (if fold == X then foldx num else foldy num) paper) arr folds
Prelude Data.List> done
[(26,3),(33,1),(37,4),(25,4),(20,3),(5,3),(27,0),(35,4),(27,2),(26,0),(23,4),(3,1),(6,3),(35,3),(35,5),(10,4),(33,1),(31,5),(30,1),(20,4),(35,2),(37,1),(20,5),(30,1),(7,0),(20,5),(6,0),(10,2),(18,0),(20,5),(10,3),(2,0),(37,3),(10,4),(28,5),(0,2),(18,4),(27,0),(20,4),(10,4),(20,2),(23,3),(35,3),(7,0),(38,5),(38,0),(28,5),(12,2),(21,2),(11,0),(5,3),(26,5),(5,4),(6,0),(8,5),(10,5),(36,2),(0,2),(30,2),(13,0),(20,1),(32,0),(17,0),(20,3),(20,4),(2,5),(23,3),(30,2),(25,5),(31,5),(10,1),(0,3),(25,5),(35,4),(35,2),(12,2),(28,5),(23,5),(38,0),(30,1),(37,3),(31,5),(23,1),(11,0),(37,1),(25,5),(22,2),(30,1),(37,1),(2,0),(7,3),(31,5),(3,1),(25,5),(23,3),(6,3),(1,0),(8,5),(10,3),(20,5),(15,4),(5,3),(35,0),(30,1),(10,2),(23,5),(5,3),(23,2),(17,0),(23,5),(8,5),(1,0),(0,1),(35,2),(6,0),(30,4),(32,5),(0,1),(6,0),(32,0),(1,5),(8,5),(23,0),(8,2),(38,5),(12,0),(36,2),(10,0),(5,1),(8,2),(10,2),(25,5),(17,0),(5,2),(37,1),(6,0),(32,0),(31,5),(26,5),(28,5),(38,5),(8,3),(21,2),(31,0),(23,0),(18,2),(23,3),(7,0),(10,4),(17,0),(22,2),(3,1),(32,0),(3,4),(28,5),(37,1),(17,0),(23,5),(13,0),(3,1),(10,2),(5,3),(21,2),(38,0),(12,0),(20,4),(0,3),(20,3),(20,5),(20,3),(38,5),(30,1),(7,0),(20,2),(2,0),(8,5),(10,4),(10,5),(1,0),(18,4),(5,3),(35,0),(6,0),(36,2),(26,5),(28,5),(20,3),(18,4),(23,0),(6,0),(30,3),(18,4),(37,3),(38,5),(3,4),(10,2),(1,0),(37,3),(25,5),(7,3),(18,3),(5,3),(25,0),(22,2),(27,0),(27,2),(0,1),(31,5),(23,4),(3,1),(33,1),(17,0),(23,4),(37,4),(5,3),(37,1),(3,1),(22,2),(31,5),(31,5),(33,1),(1,5),(36,2),(21,2),(8,1),(5,5),(10,4),(38,5),(28,0),(25,4),(3,4),(3,1),(5,3),(20,1),(5,3),(35,4),(27,5),(2,5),(8,4),(31,5),(28,5),(8,3),(33,1),(5,3),(5,3),(2,0),(10,5),(16,5),(18,4),(6,0),(20,1),(5,3),(25,5),(10,2),(28,5),(31,5),(5,3),(1,5),(0,1),(5,3),(23,2),(20,5),(25,5),(23,2),(3,1),(23,2),(10,5),(3,1),(5,3),(10,4),(10,0),(5,5),(3,4),(7,0),(25,5),(38,5),(25,4),(35,5),(37,4),(10,0),(35,0),(22,2),(13,0),(10,4),(15,4),(33,1),(10,2),(20,1),(10,2),(0,4),(23,1),(18,4),(10,2),(23,2),(27,2),(30,2),(12,0),(25,4),(35,4),(10,3),(21,2),(37,1),(38,0),(23,0),(3,1),(12,0),(8,5),(28,0),(11,2),(1,5),(3,4),(33,1),(33,1),(38,5),(6,0),(25,0),(18,1),(20,3),(3,1),(28,0),(35,5),(7,3),(37,1),(37,3),(23,4),(38,0),(20,5),(20,5),(3,4),(17,5),(37,4),(28,5),(28,5),(10,0),(12,0),(0,2),(2,0),(27,5),(28,0),(37,4),(30,1),(38,0),(16,5),(22,2),(31,5),(10,2),(7,0),(28,0),(28,1),(20,4),(38,0),(20,3),(31,5),(10,2),(10,0),(35,2),(30,4),(20,4),(18,4),(0,1),(27,0),(31,5),(38,0),(17,0),(32,5),(2,0),(23,4),(1,5),(10,2),(25,0),(37,4),(35,5),(10,4),(31,5),(25,0),(33,1),(30,1),(11,2),(1,5),(11,0),(10,5),(35,0),(26,5),(25,0),(32,0),(37,3),(28,0),(5,3),(18,2),(20,0),(20,4),(5,5),(20,5),(11,0),(21,2),(8,2),(20,4),(17,0),(6,0),(0,2),(10,4),(17,5),(25,0),(38,0),(36,2),(10,2),(8,2),(3,4),(5,3),(38,0),(27,0),(20,4),(36,2),(18,3),(25,4),(18,4),(22,2),(0,2),(32,0),(6,3),(37,3),(31,5),(8,2),(5,3),(5,3),(2,0),(30,1),(21,2),(17,5),(18,4),(8,2),(8,4),(10,2),(10,4),(35,0),(18,3),(33,1),(3,4),(5,2),(17,5),(6,0),(17,0),(23,4),(33,1),(27,2),(10,0),(16,5),(30,4),(22,2),(35,2),(33,4),(12,0),(5,3),(23,2),(27,5),(25,0),(17,5),(33,1),(23,3),(37,1),(26,0),(8,2),(17,0),(27,2),(5,5),(20,4),(2,0),(17,5),(35,5),(28,5),(35,0),(33,1),(27,0),(33,1),(6,0),(5,3),(7,0),(3,1),(10,4),(30,1),(35,4),(22,2),(28,0),(23,0),(7,0),(31,5),(28,0),(3,1),(5,5),(20,5),(3,4),(31,5),(35,5),(20,4),(7,3),(8,3),(10,4),(33,1),(0,2),(27,5),(35,2),(10,4),(23,2),(23,4),(17,5),(8,5),(2,5),(10,4),(5,5),(7,0),(18,2),(10,2),(20,4),(35,2),(32,0),(26,5),(10,2),(5,3),(0,3),(5,3),(28,0),(25,0),(11,0),(7,0),(27,0),(10,2),(35,1),(27,5),(1,0),(27,2),(23,3),(27,2),(3,1),(38,0),(30,1),(32,5),(2,0),(38,5),(20,5),(5,3),(26,5),(5,3),(27,2),(3,4),(23,2),(5,3),(17,0),(2,0),(20,4),(20,5),(17,0),(38,5),(6,0),(13,0),(37,4),(27,0),(10,0),(37,1),(17,0),(22,2),(0,2),(28,0),(8,3),(20,1),(20,5),(28,5),(25,0),(35,4),(32,5),(35,5),(20,5),(35,4),(0,1),(17,0),(10,2),(5,5),(8,5),(30,2),(31,0),(5,3),(36,2),(5,5),(23,0),(10,5),(0,2),(35,2),(17,5),(35,3),(20,5),(2,0),(3,1),(25,5),(33,1),(10,0),(31,5),(35,0),(20,5),(38,0),(23,3),(35,0),(1,5),(8,5),(35,3),(35,5),(0,1),(26,3),(5,3),(31,5),(20,4),(31,5),(10,0),(5,1),(0,3),(30,1),(20,2),(10,2),(2,0),(10,4),(26,5),(5,3),(33,1),(20,5),(10,2),(37,3),(11,0),(33,4),(32,0),(35,5),(3,1),(10,4),(18,3),(18,2),(12,0),(10,4),(11,2),(25,4),(6,0),(23,5),(30,3),(20,4),(31,5),(1,0),(3,4),(28,5),(17,5),(0,3),(12,0),(35,3),(32,0),(20,5),(8,2),(10,4),(8,2),(35,2),(23,4),(20,0),(27,2),(36,2),(2,0),(11,0),(30,2),(10,2),(38,0),(7,0),(20,5),(23,2),(10,4),(23,4),(35,2),(35,5),(28,1),(35,0),(33,1),(18,4),(37,4),(23,2),(8,4),(20,5),(2,5),(28,0),(26,5),(37,3),(37,4),(5,1),(28,1),(2,0),(18,1),(2,5),(26,5),(10,4),(20,5),(35,4),(5,3),(10,4),(38,5),(22,2),(5,3),(10,4),(38,5),(20,5),(10,4),(7,0),(20,5),(30,4),(35,4),(31,5),(28,5),(36,2),(35,5),(33,1),(10,4),(10,0),(36,2),(17,5),(7,0),(28,0),(11,2),(5,3),(38,5),(11,0),(23,5),(6,0),(26,3),(23,3),(35,5),(20,5),(0,2),(18,3),(30,2),(10,4),(32,0),(37,4),(10,4),(5,2),(10,4)]
Prelude Data.List> putStrLn . unlines $ foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' else c) $ zip [0..] row) $ zip [0..] page) page done 
 ##   ##  ####   ## #  # #### 
#  # #  # #       # #  #    # 
#    #  # ###     # ####   #  
#    #### #       # #  #  #   
#  # #  # #    #  # #  # #    
 ##  #  # #     ##  #  # #### 

                              
                              


                              

                              
                              


                     
                              
                              

                              



                              

                              



Prelude Data.List> page = replicate 40 (replicate 40 ' ')
Prelude Data.List> putStrLn . unlines $ foldl' (\page coord -> map (\(y,row) -> map (\(x,c) -> if coord == (x,y) then '#' else c) $ zip [0..] row) $ zip [0..] page) page done
 ##   ##  ####   ## #  # ####  ##  #  # 
#  # #  # #       # #  #    # #  # # #  
#    #  # ###     # ####   #  #    ##   
#    #### #       # #  #  #   #    # #  
#  # #  # #    #  # #  # #    #  # # #  
 ##  #  # #     ##  #  # ####  ##  #  # 
                                        
                                        
                                        

                                        
                                        
                                        
                                        
                     



                                        



                                        


   
                                        







                                        

        


                                        

Prelude Data.List>